
F446RE_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08006700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200000bc  080067bc  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  080067bc  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebe4  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002023  00000000  00000000  0002ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  000319d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022aa4  00000000  00000000  00032608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010639  00000000  00000000  000550ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdfd8  00000000  00000000  000656e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001336bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  00133710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006560 	.word	0x08006560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c0 	.word	0x200000c0
 800020c:	08006560 	.word	0x08006560

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__io_putchar>:
UART_HandleTypeDef huart2;

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);				//Use USART2
 80005bc:	1d39      	adds	r1, r7, #4
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <__io_putchar+0x20>)
 80005c6:	f004 fc20 	bl	8004e0a <HAL_UART_Transmit>
	return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000298 	.word	0x20000298

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80005dc:	f000 fe12 	bl	8001204 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f834 	bl	800064c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fa5c 	bl	8000aa0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 fa32 	bl	8000a50 <MX_DMA_Init>
  MX_I2C1_Init();
 80005ec:	f000 f89c 	bl	8000728 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005f0:	f000 f8c8 	bl	8000784 <MX_I2C2_Init>
  MX_SPI2_Init();
 80005f4:	f000 f9d0 	bl	8000998 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 fa00 	bl	80009fc <MX_USART2_UART_Init>


  printf("HW init OK\r\n");
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <main+0x5c>)
 80005fe:	f005 f831 	bl	8005664 <puts>
  printf("size TX: %d \r\n", sizeof(aTxBuffer));
 8000602:	2149      	movs	r1, #73	; 0x49
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x60>)
 8000606:	f004 ffa7 	bl	8005558 <iprintf>
#ifdef MASTER_SENT
    if(HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_ADDRESS, (uint8_t*)&aTxBuffer, sizeof(aTxBuffer)) != HAL_OK){
    	printf("I2C Master TX fail\r\n");
    }
#else
    if(HAL_I2C_Master_Receive_IT(&hi2c1, I2C_ADDRESS, (uint8_t*)&aRxBuffer, sizeof(aRxBuffer)) != HAL_OK){
 800060a:	2349      	movs	r3, #73	; 0x49
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <main+0x64>)
 800060e:	213e      	movs	r1, #62	; 0x3e
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <main+0x68>)
 8000612:	f001 fdc5 	bl	80021a0 <HAL_I2C_Master_Receive_IT>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d002      	beq.n	8000622 <main+0x4a>
		printf("I2C Master RX fail\r\n");
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <main+0x6c>)
 800061e:	f005 f821 	bl	8005664 <puts>
	}
#endif

    HAL_Delay(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000626:	f000 fe5f 	bl	80012e8 <HAL_Delay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800062a:	2120      	movs	r1, #32
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x70>)
 800062e:	f001 fc58 	bl	8001ee2 <HAL_GPIO_TogglePin>
    if(HAL_I2C_Master_Receive_IT(&hi2c1, I2C_ADDRESS, (uint8_t*)&aRxBuffer, sizeof(aRxBuffer)) != HAL_OK){
 8000632:	e7ea      	b.n	800060a <main+0x32>
 8000634:	08006578 	.word	0x08006578
 8000638:	08006584 	.word	0x08006584
 800063c:	200002dc 	.word	0x200002dc
 8000640:	200000d8 	.word	0x200000d8
 8000644:	08006594 	.word	0x08006594
 8000648:	40020000 	.word	0x40020000

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2234      	movs	r2, #52	; 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 ff74 	bl	8005548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <SystemClock_Config+0xd4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a29      	ldr	r2, [pc, #164]	; (8000720 <SystemClock_Config+0xd4>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SystemClock_Config+0xd8>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType 		= RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState 			= RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState 		= RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource 		= RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM 			= 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN 			= 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP 			= RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ 			= 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR 			= 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 ff02 	bl	80044e4 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e6:	f000 fa49 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fba2 	bl	8003e50 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000712:	f000 fa33 	bl	8000b7c <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  hi2c1.Instance 				= I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed 		= 400000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle 			= I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 		= 64;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 		= 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode 		= I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f001 fbd7 	bl	8001f18 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fa04 	bl	8000b7c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000d8 	.word	0x200000d8
 800077c:	40005400 	.word	0x40005400
 8000780:	00061a80 	.word	0x00061a80

08000784 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  hi2c2.Instance				= I2C2;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C2_Init+0x68>)
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <MX_I2C2_Init+0x6c>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed 		= 100000;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C2_Init+0x68>)
 8000790:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_I2C2_Init+0x70>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle 			= I2C_DUTYCYCLE_2;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C2_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 		= I2C_ADDRESS;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_I2C2_Init+0x68>)
 800079c:	223e      	movs	r2, #62	; 0x3e
 800079e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C2_Init+0x68>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_I2C2_Init+0x68>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 		= 0;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C2_Init+0x68>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_I2C2_Init+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode 		= I2C_NOSTRETCH_DISABLE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_I2C2_Init+0x68>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <MX_I2C2_Init+0x68>)
 80007c2:	f001 fba9 	bl	8001f18 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C2_Init+0x4c>
  {
	  Error_Handler();
 80007cc:	f000 f9d6 	bl	8000b7c <Error_Handler>
#ifdef MASTER_SENT
  if(HAL_I2C_Slave_Receive_IT(&hi2c2, (uint8_t*)&aRxBuffer, sizeof(aRxBuffer))!= HAL_OK){
	  printf("I2C Slave RX fail\r\n");
  }
#else
  if(HAL_I2C_Slave_Transmit_IT(&hi2c2, (uint8_t*)&aTxBuffer, sizeof(aTxBuffer))!= HAL_OK){
 80007d0:	2249      	movs	r2, #73	; 0x49
 80007d2:	4909      	ldr	r1, [pc, #36]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C2_Init+0x68>)
 80007d6:	f001 fd91 	bl	80022fc <HAL_I2C_Slave_Transmit_IT>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <MX_I2C2_Init+0x62>
 	  printf("I2C Slave TX fail\r\n");
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_I2C2_Init+0x78>)
 80007e2:	f004 ff3f 	bl	8005664 <puts>
  }
#endif

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000012c 	.word	0x2000012c
 80007f0:	40005800 	.word	0x40005800
 80007f4:	000186a0 	.word	0x000186a0
 80007f8:	20000000 	.word	0x20000000
 80007fc:	080065a8 	.word	0x080065a8

08000800 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <I2C1_EV_IRQHandler+0x10>)
 8000806:	f001 fe59 	bl	80024bc <HAL_I2C_EV_IRQHandler>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000d8 	.word	0x200000d8

08000814 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <I2C1_ER_IRQHandler+0x10>)
 800081a:	f001 ffc0 	bl	800279e <HAL_I2C_ER_IRQHandler>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000d8 	.word	0x200000d8

08000828 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <I2C2_EV_IRQHandler+0x10>)
 800082e:	f001 fe45 	bl	80024bc <HAL_I2C_EV_IRQHandler>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000012c 	.word	0x2000012c

0800083c <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <I2C2_ER_IRQHandler+0x10>)
 8000842:	f001 ffac 	bl	800279e <HAL_I2C_ER_IRQHandler>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000012c 	.word	0x2000012c

08000850 <HAL_I2C_ErrorCallback>:
  * @param  I2cHandle: I2C handle
  * @note
  * @retval None
  ************************************************************************/
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(I2cHandle->Instance == I2C1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0f      	ldr	r2, [pc, #60]	; (800089c <HAL_I2C_ErrorCallback+0x4c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d109      	bne.n	8000876 <HAL_I2C_ErrorCallback+0x26>
  {
	  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f002 f88c 	bl	8002980 <HAL_I2C_GetError>
 8000868:	4603      	mov	r3, r0
 800086a:	2b04      	cmp	r3, #4
 800086c:	d011      	beq.n	8000892 <HAL_I2C_ErrorCallback+0x42>
	  {
		  printf("I2C1 error \r\n");
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <HAL_I2C_ErrorCallback+0x50>)
 8000870:	f004 fef8 	bl	8005664 <puts>
	  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
	  {
		  printf("I2C2 error \r\n");
	  }
  }
}
 8000874:	e00d      	b.n	8000892 <HAL_I2C_ErrorCallback+0x42>
  }else if(I2cHandle->Instance == I2C2){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_I2C_ErrorCallback+0x54>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d108      	bne.n	8000892 <HAL_I2C_ErrorCallback+0x42>
	  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f002 f87d 	bl	8002980 <HAL_I2C_GetError>
 8000886:	4603      	mov	r3, r0
 8000888:	2b04      	cmp	r3, #4
 800088a:	d002      	beq.n	8000892 <HAL_I2C_ErrorCallback+0x42>
		  printf("I2C2 error \r\n");
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <HAL_I2C_ErrorCallback+0x58>)
 800088e:	f004 fee9 	bl	8005664 <puts>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40005400 	.word	0x40005400
 80008a0:	080065bc 	.word	0x080065bc
 80008a4:	40005800 	.word	0x40005800
 80008a8:	080065cc 	.word	0x080065cc

080008ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note
  * @retval None
  ************************************************************************/
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d103      	bne.n	80008c6 <HAL_I2C_SlaveTxCpltCallback+0x1a>
		printf("Master transmit finish\r\n");
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <HAL_I2C_SlaveTxCpltCallback+0x58>)
 80008c0:	f004 fed0 	bl	8005664 <puts>

		if(HAL_I2C_Slave_Transmit_IT(&hi2c2, (uint8_t*)&aTxBuffer, sizeof(aTxBuffer))!= HAL_OK){
			printf("I2C Slave TX fail\r\n");
		}
	}
}
 80008c4:	e018      	b.n	80008f8 <HAL_I2C_SlaveTxCpltCallback+0x4c>
	else if(hi2c->Instance == I2C2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_I2C_SlaveTxCpltCallback+0x5c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d113      	bne.n	80008f8 <HAL_I2C_SlaveTxCpltCallback+0x4c>
		printf("Master RX: %s\r\n", aRxBuffer);
 80008d0:	490e      	ldr	r1, [pc, #56]	; (800090c <HAL_I2C_SlaveTxCpltCallback+0x60>)
 80008d2:	480f      	ldr	r0, [pc, #60]	; (8000910 <HAL_I2C_SlaveTxCpltCallback+0x64>)
 80008d4:	f004 fe40 	bl	8005558 <iprintf>
		memset(aRxBuffer, '\0',sizeof(aRxBuffer));
 80008d8:	2249      	movs	r2, #73	; 0x49
 80008da:	2100      	movs	r1, #0
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <HAL_I2C_SlaveTxCpltCallback+0x60>)
 80008de:	f004 fe33 	bl	8005548 <memset>
		if(HAL_I2C_Slave_Transmit_IT(&hi2c2, (uint8_t*)&aTxBuffer, sizeof(aTxBuffer))!= HAL_OK){
 80008e2:	2249      	movs	r2, #73	; 0x49
 80008e4:	490b      	ldr	r1, [pc, #44]	; (8000914 <HAL_I2C_SlaveTxCpltCallback+0x68>)
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_I2C_SlaveTxCpltCallback+0x6c>)
 80008e8:	f001 fd08 	bl	80022fc <HAL_I2C_Slave_Transmit_IT>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <HAL_I2C_SlaveTxCpltCallback+0x4c>
			printf("I2C Slave TX fail\r\n");
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <HAL_I2C_SlaveTxCpltCallback+0x70>)
 80008f4:	f004 feb6 	bl	8005664 <puts>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40005400 	.word	0x40005400
 8000904:	080065dc 	.word	0x080065dc
 8000908:	40005800 	.word	0x40005800
 800090c:	200002dc 	.word	0x200002dc
 8000910:	080065f4 	.word	0x080065f4
 8000914:	20000000 	.word	0x20000000
 8000918:	2000012c 	.word	0x2000012c
 800091c:	080065a8 	.word	0x080065a8

08000920 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  I2cHandle: I2C handle
  * @note
  * @retval None
  ************************************************************************/
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a14      	ldr	r2, [pc, #80]	; (8000980 <HAL_I2C_SlaveRxCpltCallback+0x60>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d109      	bne.n	8000946 <HAL_I2C_SlaveRxCpltCallback+0x26>
		printf("Slave RX: %s\r\n", aRxBuffer);
 8000932:	4914      	ldr	r1, [pc, #80]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000934:	4814      	ldr	r0, [pc, #80]	; (8000988 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000936:	f004 fe0f 	bl	8005558 <iprintf>
		memset(aRxBuffer, '\0',sizeof(aRxBuffer));
 800093a:	2249      	movs	r2, #73	; 0x49
 800093c:	2100      	movs	r1, #0
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000940:	f004 fe02 	bl	8005548 <memset>

		if(HAL_I2C_Slave_Receive_IT(&hi2c2, (uint8_t*)&aRxBuffer, sizeof(aRxBuffer))!= HAL_OK){
			printf("I2C Slave RX fail\r\n");
		}
	}
}
 8000944:	e018      	b.n	8000978 <HAL_I2C_SlaveRxCpltCallback+0x58>
	else if(hi2c->Instance == I2C2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d113      	bne.n	8000978 <HAL_I2C_SlaveRxCpltCallback+0x58>
		printf("Slave RX: %s\r\n", aRxBuffer);
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000954:	f004 fe00 	bl	8005558 <iprintf>
		memset(aRxBuffer, '\0',sizeof(aRxBuffer));
 8000958:	2249      	movs	r2, #73	; 0x49
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800095e:	f004 fdf3 	bl	8005548 <memset>
		if(HAL_I2C_Slave_Receive_IT(&hi2c2, (uint8_t*)&aRxBuffer, sizeof(aRxBuffer))!= HAL_OK){
 8000962:	2249      	movs	r2, #73	; 0x49
 8000964:	4907      	ldr	r1, [pc, #28]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000966:	480a      	ldr	r0, [pc, #40]	; (8000990 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8000968:	f001 fd38 	bl	80023dc <HAL_I2C_Slave_Receive_IT>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <HAL_I2C_SlaveRxCpltCallback+0x58>
			printf("I2C Slave RX fail\r\n");
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8000974:	f004 fe76 	bl	8005664 <puts>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40005400 	.word	0x40005400
 8000984:	200002dc 	.word	0x200002dc
 8000988:	08006604 	.word	0x08006604
 800098c:	40005800 	.word	0x40005800
 8000990:	2000012c 	.word	0x2000012c
 8000994:	08006614 	.word	0x08006614

08000998 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance 				= SPI2;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_SPI2_Init+0x5c>)
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <MX_SPI2_Init+0x60>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode 				= SPI_MODE_SLAVE;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction 			= SPI_DIRECTION_2LINES;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize 			= SPI_DATASIZE_8BIT;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS 				= SPI_NSS_SOFT;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode 			= SPI_TIMODE_DISABLE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial 		= 10;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009dc:	220a      	movs	r2, #10
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_SPI2_Init+0x5c>)
 80009e2:	f004 f81d 	bl	8004a20 <HAL_SPI_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f8c6 	bl	8000b7c <Error_Handler>
  }

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000180 	.word	0x20000180
 80009f8:	40003800 	.word	0x40003800

080009fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  huart2.Instance 				= USART2;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_USART2_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate 			= 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength 		= UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits 			= UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity 			= UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode 				= UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl 		= UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling 		= UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f004 f99c 	bl	8004d70 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f89d 	bl	8000b7c <Error_Handler>
  }

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000298 	.word	0x20000298
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_DMA_Init+0x4c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <MX_DMA_Init+0x4c>)
 8000a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_DMA_Init+0x4c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200e      	movs	r0, #14
 8000a78:	f000 fd35 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a7c:	200e      	movs	r0, #14
 8000a7e:	f000 fd4e 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 fd2d 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	f000 fd46 	bl	800151e <HAL_NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b2c:	f001 f9c0 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin 		= B1_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_IT_FALLING;
 8000b36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b48:	f001 f81e 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin 		= LD2_Pin;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b64:	f001 f810 	bl	8001b88 <HAL_GPIO_Init>

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020800 	.word	0x40020800

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	printf("error handler\r\n");
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <Error_Handler+0x10>)
 8000b82:	f004 fd6f 	bl	8005664 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b86:	b672      	cpsid	i
}
 8000b88:	bf00      	nop
  __disable_irq();
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <Error_Handler+0xe>
 8000b8c:	08006628 	.word	0x08006628

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bce:	2007      	movs	r0, #7
 8000bd0:	f000 fc7e 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a52      	ldr	r2, [pc, #328]	; (8000d48 <HAL_I2C_MspInit+0x168>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d13d      	bne.n	8000c7e <HAL_I2C_MspInit+0x9e>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a50      	ldr	r2, [pc, #320]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin 	= GPIO_PIN_8|GPIO_PIN_9;
 8000c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 	= GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c30:	2304      	movs	r3, #4
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4845      	ldr	r0, [pc, #276]	; (8000d50 <HAL_I2C_MspInit+0x170>)
 8000c3c:	f000 ffa4 	bl	8001b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	201f      	movs	r0, #31
 8000c62:	f000 fc40 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c66:	201f      	movs	r0, #31
 8000c68:	f000 fc59 	bl	800151e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2020      	movs	r0, #32
 8000c72:	f000 fc38 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c76:	2020      	movs	r0, #32
 8000c78:	f000 fc51 	bl	800151e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  }

}
 8000c7c:	e060      	b.n	8000d40 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C2)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <HAL_I2C_MspInit+0x174>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d15b      	bne.n	8000d40 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin 	= GPIO_PIN_10;
 8000cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 	= GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481c      	ldr	r0, [pc, #112]	; (8000d50 <HAL_I2C_MspInit+0x170>)
 8000cde:	f000 ff53 	bl	8001b88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin 	= GPIO_PIN_12;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode 	= GPIO_MODE_AF_OD;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4816      	ldr	r0, [pc, #88]	; (8000d58 <HAL_I2C_MspInit+0x178>)
 8000d00:	f000 ff42 	bl	8001b88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_I2C_MspInit+0x16c>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2021      	movs	r0, #33	; 0x21
 8000d26:	f000 fbde 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d2a:	2021      	movs	r0, #33	; 0x21
 8000d2c:	f000 fbf7 	bl	800151e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2022      	movs	r0, #34	; 0x22
 8000d36:	f000 fbd6 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000d3a:	2022      	movs	r0, #34	; 0x22
 8000d3c:	f000 fbef 	bl	800151e <HAL_NVIC_EnableIRQ>
}
 8000d40:	bf00      	nop
 8000d42:	3730      	adds	r7, #48	; 0x30
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40005800 	.word	0x40005800
 8000d58:	40020800 	.word	0x40020800

08000d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a62      	ldr	r2, [pc, #392]	; (8000f04 <HAL_SPI_MspInit+0x1a8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	f040 80bd 	bne.w	8000efa <HAL_SPI_MspInit+0x19e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d90:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4b59      	ldr	r3, [pc, #356]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a58      	ldr	r2, [pc, #352]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b56      	ldr	r3, [pc, #344]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b4f      	ldr	r3, [pc, #316]	; (8000f08 <HAL_SPI_MspInit+0x1ac>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000de4:	2307      	movs	r3, #7
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4847      	ldr	r0, [pc, #284]	; (8000f0c <HAL_SPI_MspInit+0x1b0>)
 8000df0:	f000 feca 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df4:	2304      	movs	r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e04:	2305      	movs	r3, #5
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	483f      	ldr	r0, [pc, #252]	; (8000f0c <HAL_SPI_MspInit+0x1b0>)
 8000e10:	f000 feba 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4837      	ldr	r0, [pc, #220]	; (8000f10 <HAL_SPI_MspInit+0x1b4>)
 8000e32:	f000 fea9 	bl	8001b88 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e38:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <HAL_SPI_MspInit+0x1bc>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000e74:	4827      	ldr	r0, [pc, #156]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e76:	f000 fb6d 	bl	8001554 <HAL_DMA_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000e80:	f7ff fe7c 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <HAL_SPI_MspInit+0x1b8>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_SPI_MspInit+0x1c4>)
 8000e94:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eae:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ece:	4813      	ldr	r0, [pc, #76]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000ed0:	f000 fb40 	bl	8001554 <HAL_DMA_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_SPI_MspInit+0x182>
    {
      Error_Handler();
 8000eda:	f7ff fe4f 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000ee2:	649a      	str	r2, [r3, #72]	; 0x48
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_SPI_MspInit+0x1c0>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2024      	movs	r0, #36	; 0x24
 8000ef0:	f000 faf9 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ef4:	2024      	movs	r0, #36	; 0x24
 8000ef6:	f000 fb12 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40003800 	.word	0x40003800
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020400 	.word	0x40020400
 8000f14:	200001d8 	.word	0x200001d8
 8000f18:	40026058 	.word	0x40026058
 8000f1c:	20000238 	.word	0x20000238
 8000f20:	40026070 	.word	0x40026070

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12b      	bne.n	8000f9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8e:	2307      	movs	r3, #7
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_UART_MspInit+0x8c>)
 8000f9a:	f000 fdf5 	bl	8001b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004400 	.word	0x40004400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f952 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA1_Stream3_IRQHandler+0x10>)
 800100e:	f000 fb71 	bl	80016f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001d8 	.word	0x200001d8

0800101c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DMA1_Stream4_IRQHandler+0x10>)
 8001022:	f000 fb67 	bl	80016f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000238 	.word	0x20000238

08001030 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <SPI2_IRQHandler+0x10>)
 8001036:	f003 fd7d 	bl	8004b34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000180 	.word	0x20000180

08001044 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e00a      	b.n	800106c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001056:	f3af 8000 	nop.w
 800105a:	4601      	mov	r1, r0
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60ba      	str	r2, [r7, #8]
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf0      	blt.n	8001056 <_read+0x12>
	}

return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e009      	b.n	80010a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	60ba      	str	r2, [r7, #8]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa8b 	bl	80005b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbf1      	blt.n	8001090 <_write+0x12>
	}
	return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_close>:

int _close(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return -1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010de:	605a      	str	r2, [r3, #4]
	return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_isatty>:

int _isatty(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	return 1;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f004 f9d0 	bl	80054f4 <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	20000328 	.word	0x20000328
 8001188:	20000340 	.word	0x20000340

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b6:	490e      	ldr	r1, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011cc:	4c0b      	ldr	r4, [pc, #44]	; (80011fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011da:	f7ff ffd7 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011de:	f004 f98f 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff f9f9 	bl	80005d8 <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80011f4:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 80011f8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80011fc:	20000340 	.word	0x20000340

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_Init+0x40>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_Init+0x40>)
 800121a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x40>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f94f 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fcaa 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f967 	bl	800153a <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f92f 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000004c 	.word	0x2000004c
 80012a0:	20000054 	.word	0x20000054
 80012a4:	20000050 	.word	0x20000050

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000054 	.word	0x20000054
 80012cc:	2000032c 	.word	0x2000032c

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000032c 	.word	0x2000032c

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000054 	.word	0x20000054

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff3e 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff8e 	bl	8001424 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff31 	bl	8001394 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff feb6 	bl	80012d0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e099      	b.n	80016a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001590:	e00f      	b.n	80015b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001592:	f7ff fe9d 	bl	80012d0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b05      	cmp	r3, #5
 800159e:	d908      	bls.n	80015b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2220      	movs	r2, #32
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e078      	b.n	80016a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e8      	bne.n	8001592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_DMA_Init+0x158>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	2b04      	cmp	r3, #4
 800160a:	d107      	bne.n	800161c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	4313      	orrs	r3, r2
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4313      	orrs	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f023 0307 	bic.w	r3, r3, #7
 8001632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4313      	orrs	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	2b04      	cmp	r3, #4
 8001644:	d117      	bne.n	8001676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4313      	orrs	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00e      	beq.n	8001676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fa19 	bl	8001a90 <DMA_CheckFifoParam>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001672:	2301      	movs	r3, #1
 8001674:	e016      	b.n	80016a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f9d0 	bl	8001a24 <DMA_CalcBaseAndBitshift>
 8001684:	4603      	mov	r3, r0
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	409a      	lsls	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f010803f 	.word	0xf010803f

080016b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d004      	beq.n	80016ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00c      	b.n	80016e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2205      	movs	r2, #5
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001700:	4b8e      	ldr	r3, [pc, #568]	; (800193c <HAL_DMA_IRQHandler+0x248>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a8e      	ldr	r2, [pc, #568]	; (8001940 <HAL_DMA_IRQHandler+0x24c>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0a9b      	lsrs	r3, r3, #10
 800170c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	2208      	movs	r2, #8
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01a      	beq.n	8001760 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2208      	movs	r2, #8
 800174e:	409a      	lsls	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	2201      	movs	r2, #1
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d012      	beq.n	8001796 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	2201      	movs	r2, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2204      	movs	r2, #4
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d012      	beq.n	80017cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00b      	beq.n	80017cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2204      	movs	r2, #4
 80017ba:	409a      	lsls	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	2210      	movs	r2, #16
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d043      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d03c      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ee:	2210      	movs	r2, #16
 80017f0:	409a      	lsls	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d018      	beq.n	8001836 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d024      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
 8001822:	e01f      	b.n	8001864 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
 8001834:	e016      	b.n	8001864 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d107      	bne.n	8001854 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0208 	bic.w	r2, r2, #8
 8001852:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	2220      	movs	r2, #32
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 808f 	beq.w	8001994 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 8087 	beq.w	8001994 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188a:	2220      	movs	r2, #32
 800188c:	409a      	lsls	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b05      	cmp	r3, #5
 800189c:	d136      	bne.n	800190c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0216 	bic.w	r2, r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_DMA_IRQHandler+0x1da>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0208 	bic.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	223f      	movs	r2, #63	; 0x3f
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d07e      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
        }
        return;
 800190a:	e079      	b.n	8001a00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01d      	beq.n	8001956 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	2b00      	cmp	r3, #0
 800192e:	d031      	beq.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
 8001938:	e02c      	b.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
 800193a:	bf00      	nop
 800193c:	2000004c 	.word	0x2000004c
 8001940:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d023      	beq.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4798      	blx	r3
 8001954:	e01e      	b.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10f      	bne.n	8001984 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0210 	bic.w	r2, r2, #16
 8001972:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	2b00      	cmp	r3, #0
 800199a:	d032      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d022      	beq.n	80019ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2205      	movs	r2, #5
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d307      	bcc.n	80019dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f2      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x2cc>
 80019da:	e000      	b.n	80019de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
 80019fe:	e000      	b.n	8001a02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a00:	bf00      	nop
    }
  }
}
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a16:	b2db      	uxtb	r3, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3b10      	subs	r3, #16
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <DMA_CalcBaseAndBitshift+0x64>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a3e:	4a13      	ldr	r2, [pc, #76]	; (8001a8c <DMA_CalcBaseAndBitshift+0x68>)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d909      	bls.n	8001a66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	1d1a      	adds	r2, r3, #4
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58
 8001a64:	e007      	b.n	8001a76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a6e:	f023 0303 	bic.w	r3, r3, #3
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	aaaaaaab 	.word	0xaaaaaaab
 8001a8c:	08006650 	.word	0x08006650

08001a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11f      	bne.n	8001aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d856      	bhi.n	8001b5e <DMA_CheckFifoParam+0xce>
 8001ab0:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <DMA_CheckFifoParam+0x28>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001adb 	.word	0x08001adb
 8001ac0:	08001ac9 	.word	0x08001ac9
 8001ac4:	08001b5f 	.word	0x08001b5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d046      	beq.n	8001b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad8:	e043      	b.n	8001b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ae2:	d140      	bne.n	8001b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae8:	e03d      	b.n	8001b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af2:	d121      	bne.n	8001b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d837      	bhi.n	8001b6a <DMA_CheckFifoParam+0xda>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <DMA_CheckFifoParam+0x70>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b17 	.word	0x08001b17
 8001b08:	08001b11 	.word	0x08001b11
 8001b0c:	08001b29 	.word	0x08001b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
      break;
 8001b14:	e030      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d025      	beq.n	8001b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b26:	e022      	b.n	8001b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b30:	d11f      	bne.n	8001b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b36:	e01c      	b.n	8001b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d903      	bls.n	8001b46 <DMA_CheckFifoParam+0xb6>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d003      	beq.n	8001b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b44:	e018      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4a:	e015      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b5c:	e00b      	b.n	8001b76 <DMA_CheckFifoParam+0xe6>
      break;
 8001b5e:	bf00      	nop
 8001b60:	e00a      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b62:	bf00      	nop
 8001b64:	e008      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b66:	bf00      	nop
 8001b68:	e006      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6a:	bf00      	nop
 8001b6c:	e004      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e002      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b72:	bf00      	nop
 8001b74:	e000      	b.n	8001b78 <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
    }
  } 
  
  return status; 
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e165      	b.n	8001e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f040 8154 	bne.w	8001e6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d005      	beq.n	8001bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d130      	bne.n	8001c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 0201 	and.w	r2, r3, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d017      	beq.n	8001c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d123      	bne.n	8001ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80ae 	beq.w	8001e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a5c      	ldr	r2, [pc, #368]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2a:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x308>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d025      	beq.n	8001da2 <HAL_GPIO_Init+0x21a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x30c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01f      	beq.n	8001d9e <HAL_GPIO_Init+0x216>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x212>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x314>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x20e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x318>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x20a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x31c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_GPIO_Init+0x320>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x202>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f ae96 	bls.w	8001ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40021400 	.word	0x40021400
 8001ea8:	40021800 	.word	0x40021800
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef4:	887a      	ldrh	r2, [r7, #2]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	400b      	ands	r3, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e12b      	b.n	8002182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe fe4e 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f002 f85a 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a81      	ldr	r2, [pc, #516]	; (800218c <HAL_I2C_Init+0x274>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d807      	bhi.n	8001f9c <HAL_I2C_Init+0x84>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a80      	ldr	r2, [pc, #512]	; (8002190 <HAL_I2C_Init+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e006      	b.n	8001faa <HAL_I2C_Init+0x92>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a7d      	ldr	r2, [pc, #500]	; (8002194 <HAL_I2C_Init+0x27c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	bf94      	ite	ls
 8001fa4:	2301      	movls	r3, #1
 8001fa6:	2300      	movhi	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0e7      	b.n	8002182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4a78      	ldr	r2, [pc, #480]	; (8002198 <HAL_I2C_Init+0x280>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_I2C_Init+0x274>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d802      	bhi.n	8001fec <HAL_I2C_Init+0xd4>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	e009      	b.n	8002000 <HAL_I2C_Init+0xe8>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4a69      	ldr	r2, [pc, #420]	; (800219c <HAL_I2C_Init+0x284>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	3301      	adds	r3, #1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	495c      	ldr	r1, [pc, #368]	; (800218c <HAL_I2C_Init+0x274>)
 800201c:	428b      	cmp	r3, r1
 800201e:	d819      	bhi.n	8002054 <HAL_I2C_Init+0x13c>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e59      	subs	r1, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fbb1 f3f3 	udiv	r3, r1, r3
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002034:	400b      	ands	r3, r1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_I2C_Init+0x138>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e59      	subs	r1, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fbb1 f3f3 	udiv	r3, r1, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	e051      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002050:	2304      	movs	r3, #4
 8002052:	e04f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_I2C_Init+0x168>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e012      	b.n	80020a6 <HAL_I2C_Init+0x18e>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x196>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e022      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10e      	bne.n	80020d4 <HAL_I2C_Init+0x1bc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e58      	subs	r0, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6859      	ldr	r1, [r3, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	440b      	add	r3, r1
 80020c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d2:	e00f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	0099      	lsls	r1, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	6809      	ldr	r1, [r1, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6911      	ldr	r1, [r2, #16]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	000186a0 	.word	0x000186a0
 8002190:	001e847f 	.word	0x001e847f
 8002194:	003d08ff 	.word	0x003d08ff
 8002198:	431bde83 	.word	0x431bde83
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	817b      	strh	r3, [r7, #10]
 80021b0:	4613      	mov	r3, r2
 80021b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 808d 	bne.w	80022e0 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80021c6:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <HAL_I2C_Master_Receive_IT+0x150>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	4a49      	ldr	r2, [pc, #292]	; (80022f4 <HAL_I2C_Master_Receive_IT+0x154>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0a1a      	lsrs	r2, r3, #8
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	009a      	lsls	r2, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d116      	bne.n	800221a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e063      	b.n	80022e2 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b02      	cmp	r3, #2
 8002226:	d0db      	beq.n	80021e0 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_I2C_Master_Receive_IT+0x96>
 8002232:	2302      	movs	r3, #2
 8002234:	e055      	b.n	80022e2 <HAL_I2C_Master_Receive_IT+0x142>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d007      	beq.n	800225c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2222      	movs	r2, #34	; 0x22
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2210      	movs	r2, #16
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	893a      	ldrh	r2, [r7, #8]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_I2C_Master_Receive_IT+0x158>)
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800229e:	897a      	ldrh	r2, [r7, #10]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80022ba:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022ca:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022da:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2000004c 	.word	0x2000004c
 80022f4:	14f8b589 	.word	0x14f8b589
 80022f8:	ffff0000 	.word	0xffff0000

080022fc <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	d158      	bne.n	80023c8 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_I2C_Slave_Transmit_IT+0x26>
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e051      	b.n	80023ca <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_I2C_Slave_Transmit_IT+0x38>
 8002330:	2302      	movs	r3, #2
 8002332:	e04a      	b.n	80023ca <HAL_I2C_Slave_Transmit_IT+0xce>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d007      	beq.n	800235a <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002368:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2221      	movs	r2, #33	; 0x21
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80023c2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d158      	bne.n	80024a8 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_I2C_Slave_Receive_IT+0x26>
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e051      	b.n	80024aa <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2C_Slave_Receive_IT+0x38>
 8002410:	2302      	movs	r3, #2
 8002412:	e04a      	b.n	80024aa <HAL_I2C_Slave_Receive_IT+0xce>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002448:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2222      	movs	r2, #34	; 0x22
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800248a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80024a2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	ffff0000 	.word	0xffff0000

080024bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d003      	beq.n	80024f4 <HAL_I2C_EV_IRQHandler+0x38>
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	f040 80c1 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_I2C_EV_IRQHandler+0x6e>
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002514:	d003      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0x62>
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800251c:	d101      	bne.n	8002522 <HAL_I2C_EV_IRQHandler+0x66>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_I2C_EV_IRQHandler+0x68>
 8002522:	2300      	movs	r3, #0
 8002524:	2b01      	cmp	r3, #1
 8002526:	f000 8132 	beq.w	800278e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00c      	beq.n	800254e <HAL_I2C_EV_IRQHandler+0x92>
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	0a5b      	lsrs	r3, r3, #9
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 fc69 	bl	8003e18 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fd71 	bl	800302e <I2C_Master_SB>
 800254c:	e092      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_I2C_EV_IRQHandler+0xb2>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	0a5b      	lsrs	r3, r3, #9
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fde7 	bl	800313a <I2C_Master_ADD10>
 800256c:	e082      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_I2C_EV_IRQHandler+0xd2>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	0a5b      	lsrs	r3, r3, #9
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fe01 	bl	800318e <I2C_Master_ADDR>
 800258c:	e072      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03b      	beq.n	8002612 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a8:	f000 80f3 	beq.w	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	09db      	lsrs	r3, r3, #7
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00f      	beq.n	80025d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f9e1 	bl	8002998 <I2C_MasterTransmit_TXE>
 80025d6:	e04d      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80d6 	beq.w	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	0a5b      	lsrs	r3, r3, #9
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80cf 	beq.w	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	2b21      	cmp	r3, #33	; 0x21
 80025f8:	d103      	bne.n	8002602 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa68 	bl	8002ad0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002600:	e0c7      	b.n	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	f040 80c4 	bne.w	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fad6 	bl	8002bbc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002610:	e0bf      	b.n	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002620:	f000 80b7 	beq.w	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00f      	beq.n	8002650 <HAL_I2C_EV_IRQHandler+0x194>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_I2C_EV_IRQHandler+0x194>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fb4b 	bl	8002ce4 <I2C_MasterReceive_RXNE>
 800264e:	e011      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 809a 	beq.w	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	0a5b      	lsrs	r3, r3, #9
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8093 	beq.w	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fbf4 	bl	8002e5a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002672:	e08e      	b.n	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002674:	e08d      	b.n	8002792 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e007      	b.n	8002698 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d012      	beq.n	80026ca <HAL_I2C_EV_IRQHandler+0x20e>
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	0a5b      	lsrs	r3, r3, #9
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00c      	beq.n	80026ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80026c0:	69b9      	ldr	r1, [r7, #24]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 ffb2 	bl	800362c <I2C_Slave_ADDR>
 80026c8:	e066      	b.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_I2C_EV_IRQHandler+0x22e>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	0a5b      	lsrs	r3, r3, #9
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 ffec 	bl	80036c0 <I2C_Slave_STOPF>
 80026e8:	e056      	b.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026ea:	7bbb      	ldrb	r3, [r7, #14]
 80026ec:	2b21      	cmp	r3, #33	; 0x21
 80026ee:	d002      	beq.n	80026f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80026f0:	7bbb      	ldrb	r3, [r7, #14]
 80026f2:	2b29      	cmp	r3, #41	; 0x29
 80026f4:	d125      	bne.n	8002742 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	09db      	lsrs	r3, r3, #7
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00f      	beq.n	8002722 <HAL_I2C_EV_IRQHandler+0x266>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	0a9b      	lsrs	r3, r3, #10
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_I2C_EV_IRQHandler+0x266>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fec8 	bl	80034b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002720:	e039      	b.n	8002796 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d033      	beq.n	8002796 <HAL_I2C_EV_IRQHandler+0x2da>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	0a5b      	lsrs	r3, r3, #9
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d02d      	beq.n	8002796 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fef5 	bl	800352a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002740:	e029      	b.n	8002796 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	099b      	lsrs	r3, r3, #6
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00f      	beq.n	800276e <HAL_I2C_EV_IRQHandler+0x2b2>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	0a9b      	lsrs	r3, r3, #10
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_I2C_EV_IRQHandler+0x2b2>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 ff00 	bl	800356c <I2C_SlaveReceive_RXNE>
 800276c:	e014      	b.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	0a5b      	lsrs	r3, r3, #9
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 ff2e 	bl	80035e8 <I2C_SlaveReceive_BTF>
 800278c:	e004      	b.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800278e:	bf00      	nop
 8002790:	e002      	b.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002796:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b08a      	sub	sp, #40	; 0x28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <HAL_I2C_ER_IRQHandler+0x4e>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	0a5b      	lsrs	r3, r3, #9
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <HAL_I2C_ER_IRQHandler+0x78>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002814:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	0a9b      	lsrs	r3, r3, #10
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03f      	beq.n	80028a2 <HAL_I2C_ER_IRQHandler+0x104>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d039      	beq.n	80028a2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800282e:	7efb      	ldrb	r3, [r7, #27]
 8002830:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002848:	7ebb      	ldrb	r3, [r7, #26]
 800284a:	2b20      	cmp	r3, #32
 800284c:	d112      	bne.n	8002874 <HAL_I2C_ER_IRQHandler+0xd6>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10f      	bne.n	8002874 <HAL_I2C_ER_IRQHandler+0xd6>
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	2b21      	cmp	r3, #33	; 0x21
 8002858:	d008      	beq.n	800286c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b29      	cmp	r3, #41	; 0x29
 800285e:	d005      	beq.n	800286c <HAL_I2C_ER_IRQHandler+0xce>
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	2b28      	cmp	r3, #40	; 0x28
 8002864:	d106      	bne.n	8002874 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b21      	cmp	r3, #33	; 0x21
 800286a:	d103      	bne.n	8002874 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f001 f857 	bl	8003920 <I2C_Slave_AF>
 8002872:	e016      	b.n	80028a2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800287c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002886:	7efb      	ldrb	r3, [r7, #27]
 8002888:	2b10      	cmp	r3, #16
 800288a:	d002      	beq.n	8002892 <HAL_I2C_ER_IRQHandler+0xf4>
 800288c:	7efb      	ldrb	r3, [r7, #27]
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d107      	bne.n	80028a2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	0adb      	lsrs	r3, r3, #11
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00e      	beq.n	80028cc <HAL_I2C_ER_IRQHandler+0x12e>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80028ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 f88e 	bl	8003a00 <I2C_ITError>
  }
}
 80028e4:	bf00      	nop
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
 8002920:	4613      	mov	r3, r2
 8002922:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d150      	bne.n	8002a60 <I2C_MasterTransmit_TXE+0xc8>
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b21      	cmp	r3, #33	; 0x21
 80029c2:	d14d      	bne.n	8002a60 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d01d      	beq.n	8002a06 <I2C_MasterTransmit_TXE+0x6e>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d01a      	beq.n	8002a06 <I2C_MasterTransmit_TXE+0x6e>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029d6:	d016      	beq.n	8002a06 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2211      	movs	r2, #17
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff74 	bl	80028ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a04:	e060      	b.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a14:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d107      	bne.n	8002a50 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff7b 	bl	8002944 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a4e:	e03b      	b.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff47 	bl	80028ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a5e:	e033      	b.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b21      	cmp	r3, #33	; 0x21
 8002a64:	d005      	beq.n	8002a72 <I2C_MasterTransmit_TXE+0xda>
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d12d      	bne.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b22      	cmp	r3, #34	; 0x22
 8002a70:	d12a      	bne.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d108      	bne.n	8002a8e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a8c:	e01c      	b.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d103      	bne.n	8002aa2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f88e 	bl	8002bbc <I2C_MemoryTransmit_TXE_BTF>
}
 8002aa0:	e012      	b.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ac6:	e7ff      	b.n	8002ac8 <I2C_MasterTransmit_TXE+0x130>
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b21      	cmp	r3, #33	; 0x21
 8002ae8:	d164      	bne.n	8002bb4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b18:	e04c      	b.n	8002bb4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d01d      	beq.n	8002b5c <I2C_MasterTransmit_BTF+0x8c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d01a      	beq.n	8002b5c <I2C_MasterTransmit_BTF+0x8c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b2c:	d016      	beq.n	8002b5c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b3c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2211      	movs	r2, #17
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fec9 	bl	80028ec <HAL_I2C_MasterTxCpltCallback>
}
 8002b5a:	e02b      	b.n	8002bb4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b6a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d107      	bne.n	8002ba6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fed0 	bl	8002944 <HAL_I2C_MemTxCpltCallback>
}
 8002ba4:	e006      	b.n	8002bb4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fe9c 	bl	80028ec <HAL_I2C_MasterTxCpltCallback>
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11d      	bne.n	8002c10 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d10b      	bne.n	8002bf4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bec:	1c9a      	adds	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002bf2:	e073      	b.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	121b      	asrs	r3, r3, #8
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c0e:	e065      	b.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10b      	bne.n	8002c30 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c2e:	e055      	b.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d151      	bne.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b22      	cmp	r3, #34	; 0x22
 8002c3c:	d10d      	bne.n	8002c5a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c58:	e040      	b.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d015      	beq.n	8002c90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b21      	cmp	r3, #33	; 0x21
 8002c68:	d112      	bne.n	8002c90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	781a      	ldrb	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c8e:	e025      	b.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d120      	bne.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b21      	cmp	r3, #33	; 0x21
 8002c9e:	d11d      	bne.n	8002cdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fe34 	bl	8002944 <HAL_I2C_MemTxCpltCallback>
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b22      	cmp	r3, #34	; 0x22
 8002cf6:	f040 80ac 	bne.w	8002e52 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d921      	bls.n	8002d4c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	f040 808c 	bne.w	8002e52 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002d4a:	e082      	b.n	8002e52 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d075      	beq.n	8002e40 <I2C_MasterReceive_RXNE+0x15c>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d002      	beq.n	8002d60 <I2C_MasterReceive_RXNE+0x7c>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d16f      	bne.n	8002e40 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f001 f827 	bl	8003db4 <I2C_WaitOnSTOPRequestThroughIT>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d142      	bne.n	8002df2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d10a      	bne.n	8002ddc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fdbf 	bl	8002958 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dda:	e03a      	b.n	8002e52 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2212      	movs	r2, #18
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fd88 	bl	8002900 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002df0:	e02f      	b.n	8002e52 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e00:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fd fd09 	bl	8000850 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e3e:	e008      	b.n	8002e52 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4e:	605a      	str	r2, [r3, #4]
}
 8002e50:	e7ff      	b.n	8002e52 <I2C_MasterReceive_RXNE+0x16e>
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d11b      	bne.n	8002eaa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e80:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ea8:	e0bd      	b.n	8003026 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d129      	bne.n	8002f08 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d00a      	beq.n	8002ee0 <I2C_MasterReceive_BTF+0x86>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d007      	beq.n	8002ee0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ede:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f06:	e08e      	b.n	8003026 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d176      	bne.n	8003000 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <I2C_MasterReceive_BTF+0xc4>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d108      	bne.n	8002f30 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e019      	b.n	8002f64 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d002      	beq.n	8002f3c <I2C_MasterReceive_BTF+0xe2>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d108      	bne.n	8002f4e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e00a      	b.n	8002f64 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d007      	beq.n	8002f64 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fbe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d10a      	bne.n	8002fea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fcb8 	bl	8002958 <HAL_I2C_MemRxCpltCallback>
}
 8002fe8:	e01d      	b.n	8003026 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2212      	movs	r2, #18
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fc81 	bl	8002900 <HAL_I2C_MasterRxCpltCallback>
}
 8002ffe:	e012      	b.n	8003026 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d117      	bne.n	8003072 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800305a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800305c:	e067      	b.n	800312e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	b2da      	uxtb	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
}
 8003070:	e05d      	b.n	800312e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800307a:	d133      	bne.n	80030e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b21      	cmp	r3, #33	; 0x21
 8003086:	d109      	bne.n	800309c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	e008      	b.n	80030ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <I2C_Master_SB+0x92>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d108      	bne.n	80030d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d032      	beq.n	800312e <I2C_Master_SB+0x100>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d02d      	beq.n	800312e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e0:	605a      	str	r2, [r3, #4]
}
 80030e2:	e024      	b.n	800312e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10e      	bne.n	800310a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	11db      	asrs	r3, r3, #7
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0306 	and.w	r3, r3, #6
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f063 030f 	orn	r3, r3, #15
 8003100:	b2da      	uxtb	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	611a      	str	r2, [r3, #16]
}
 8003108:	e011      	b.n	800312e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10d      	bne.n	800312e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	b29b      	uxth	r3, r3
 8003118:	11db      	asrs	r3, r3, #7
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f003 0306 	and.w	r3, r3, #6
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f063 030e 	orn	r3, r3, #14
 8003126:	b2da      	uxtb	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	b2da      	uxtb	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <I2C_Master_ADD10+0x26>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00c      	beq.n	8003182 <I2C_Master_ADD10+0x48>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003180:	605a      	str	r2, [r3, #4]
  }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800318e:	b480      	push	{r7}
 8003190:	b091      	sub	sp, #68	; 0x44
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b22      	cmp	r3, #34	; 0x22
 80031b6:	f040 8169 	bne.w	800348c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <I2C_Master_ADDR+0x54>
 80031c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d10b      	bne.n	80031e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	633b      	str	r3, [r7, #48]	; 0x30
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	e160      	b.n	80034a4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11d      	bne.n	8003226 <I2C_Master_ADDR+0x98>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80031f2:	d118      	bne.n	8003226 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f4:	2300      	movs	r3, #0
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003218:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	651a      	str	r2, [r3, #80]	; 0x50
 8003224:	e13e      	b.n	80034a4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d113      	bne.n	8003258 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003230:	2300      	movs	r3, #0
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e115      	b.n	8003484 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	f040 808a 	bne.w	8003378 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800326a:	d137      	bne.n	80032dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328a:	d113      	bne.n	80032b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	e0e7      	b.n	8003484 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e0d3      	b.n	8003484 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d02e      	beq.n	8003340 <I2C_Master_ADDR+0x1b2>
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d02b      	beq.n	8003340 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ea:	2b12      	cmp	r3, #18
 80032ec:	d102      	bne.n	80032f4 <I2C_Master_ADDR+0x166>
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d125      	bne.n	8003340 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d00e      	beq.n	8003318 <I2C_Master_ADDR+0x18a>
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d00b      	beq.n	8003318 <I2C_Master_ADDR+0x18a>
 8003300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003302:	2b10      	cmp	r3, #16
 8003304:	d008      	beq.n	8003318 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e007      	b.n	8003328 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003326:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	e0a1      	b.n	8003484 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e085      	b.n	8003484 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d14d      	bne.n	800341e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2b04      	cmp	r3, #4
 8003386:	d016      	beq.n	80033b6 <I2C_Master_ADDR+0x228>
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2b02      	cmp	r3, #2
 800338c:	d013      	beq.n	80033b6 <I2C_Master_ADDR+0x228>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b10      	cmp	r3, #16
 8003392:	d010      	beq.n	80033b6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e007      	b.n	80033c6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d4:	d117      	bne.n	8003406 <I2C_Master_ADDR+0x278>
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033dc:	d00b      	beq.n	80033f6 <I2C_Master_ADDR+0x268>
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d008      	beq.n	80033f6 <I2C_Master_ADDR+0x268>
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d005      	beq.n	80033f6 <I2C_Master_ADDR+0x268>
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d002      	beq.n	80033f6 <I2C_Master_ADDR+0x268>
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d107      	bne.n	8003406 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003404:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e032      	b.n	8003484 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800342c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343c:	d117      	bne.n	800346e <I2C_Master_ADDR+0x2e0>
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003444:	d00b      	beq.n	800345e <I2C_Master_ADDR+0x2d0>
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	2b01      	cmp	r3, #1
 800344a:	d008      	beq.n	800345e <I2C_Master_ADDR+0x2d0>
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	2b08      	cmp	r3, #8
 8003450:	d005      	beq.n	800345e <I2C_Master_ADDR+0x2d0>
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	2b10      	cmp	r3, #16
 8003456:	d002      	beq.n	800345e <I2C_Master_ADDR+0x2d0>
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	2b20      	cmp	r3, #32
 800345c:	d107      	bne.n	800346e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800346c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800348a:	e00b      	b.n	80034a4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
}
 80034a2:	e7ff      	b.n	80034a4 <I2C_Master_ADDR+0x316>
 80034a4:	bf00      	nop
 80034a6:	3744      	adds	r7, #68	; 0x44
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02b      	beq.n	8003522 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d114      	bne.n	8003522 <I2C_SlaveTransmit_TXE+0x72>
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b29      	cmp	r3, #41	; 0x29
 80034fc:	d111      	bne.n	8003522 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2221      	movs	r2, #33	; 0x21
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2228      	movs	r2, #40	; 0x28
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fd f9c5 	bl	80008ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d011      	beq.n	8003560 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d02c      	beq.n	80035e0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d114      	bne.n	80035e0 <I2C_SlaveReceive_RXNE+0x74>
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b2a      	cmp	r3, #42	; 0x2a
 80035ba:	d111      	bne.n	80035e0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2222      	movs	r2, #34	; 0x22
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2228      	movs	r2, #40	; 0x28
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd f9a0 	bl	8000920 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003646:	2b28      	cmp	r3, #40	; 0x28
 8003648:	d127      	bne.n	800369a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003658:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	09db      	lsrs	r3, r3, #7
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d103      	bne.n	800367e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	81bb      	strh	r3, [r7, #12]
 800367c:	e002      	b.n	8003684 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800368c:	89ba      	ldrh	r2, [r7, #12]
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff f93e 	bl	8002914 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003698:	e00e      	b.n	80036b8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800371c:	d172      	bne.n	8003804 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b22      	cmp	r3, #34	; 0x22
 8003722:	d002      	beq.n	800372a <I2C_Slave_STOPF+0x6a>
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b2a      	cmp	r3, #42	; 0x2a
 8003728:	d135      	bne.n	8003796 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe f950 	bl	8001a08 <HAL_DMA_GetState>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d049      	beq.n	8003802 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	4a69      	ldr	r2, [pc, #420]	; (8003918 <I2C_Slave_STOPF+0x258>)
 8003774:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd ff98 	bl	80016b0 <HAL_DMA_Abort_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03d      	beq.n	8003802 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003794:	e035      	b.n	8003802 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0204 	orr.w	r2, r3, #4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe f91a 	bl	8001a08 <HAL_DMA_GetState>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d014      	beq.n	8003804 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	4a4e      	ldr	r2, [pc, #312]	; (8003918 <I2C_Slave_STOPF+0x258>)
 80037e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd ff62 	bl	80016b0 <HAL_DMA_Abort_IT>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037fc:	4610      	mov	r0, r2
 80037fe:	4798      	blx	r3
 8003800:	e000      	b.n	8003804 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003802:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03e      	beq.n	800388c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b04      	cmp	r3, #4
 800381a:	d112      	bne.n	8003842 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d112      	bne.n	8003876 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8b3 	bl	8003a00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800389a:	e039      	b.n	8003910 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b2a      	cmp	r3, #42	; 0x2a
 80038a0:	d109      	bne.n	80038b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2228      	movs	r2, #40	; 0x28
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd f835 	bl	8000920 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b28      	cmp	r3, #40	; 0x28
 80038c0:	d111      	bne.n	80038e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <I2C_Slave_STOPF+0x25c>)
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff f826 	bl	8002930 <HAL_I2C_ListenCpltCallback>
}
 80038e4:	e014      	b.n	8003910 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	2b22      	cmp	r3, #34	; 0x22
 80038ec:	d002      	beq.n	80038f4 <I2C_Slave_STOPF+0x234>
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b22      	cmp	r3, #34	; 0x22
 80038f2:	d10d      	bne.n	8003910 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd f808 	bl	8000920 <HAL_I2C_SlaveRxCpltCallback>
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	08003c65 	.word	0x08003c65
 800391c:	ffff0000 	.word	0xffff0000

08003920 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d002      	beq.n	8003942 <I2C_Slave_AF+0x22>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b20      	cmp	r3, #32
 8003940:	d129      	bne.n	8003996 <I2C_Slave_AF+0x76>
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b28      	cmp	r3, #40	; 0x28
 8003946:	d126      	bne.n	8003996 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2c      	ldr	r2, [pc, #176]	; (80039fc <I2C_Slave_AF+0xdc>)
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800395c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003966:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe ffce 	bl	8002930 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003994:	e02e      	b.n	80039f4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b21      	cmp	r3, #33	; 0x21
 800399a:	d126      	bne.n	80039ea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <I2C_Slave_AF+0xdc>)
 80039a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2221      	movs	r2, #33	; 0x21
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fc ff62 	bl	80008ac <HAL_I2C_SlaveTxCpltCallback>
}
 80039e8:	e004      	b.n	80039f4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039f2:	615a      	str	r2, [r3, #20]
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	ffff0000 	.word	0xffff0000

08003a00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a18:	7bbb      	ldrb	r3, [r7, #14]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d002      	beq.n	8003a24 <I2C_ITError+0x24>
 8003a1e:	7bbb      	ldrb	r3, [r7, #14]
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d10a      	bne.n	8003a3a <I2C_ITError+0x3a>
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b22      	cmp	r3, #34	; 0x22
 8003a28:	d107      	bne.n	8003a3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a40:	2b28      	cmp	r3, #40	; 0x28
 8003a42:	d107      	bne.n	8003a54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2228      	movs	r2, #40	; 0x28
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a52:	e015      	b.n	8003a80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a62:	d00a      	beq.n	8003a7a <I2C_ITError+0x7a>
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b60      	cmp	r3, #96	; 0x60
 8003a68:	d007      	beq.n	8003a7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8e:	d162      	bne.n	8003b56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d020      	beq.n	8003af0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	4a6a      	ldr	r2, [pc, #424]	; (8003c5c <I2C_ITError+0x25c>)
 8003ab4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd fdf8 	bl	80016b0 <HAL_DMA_Abort_IT>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8089 	beq.w	8003bda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aea:	4610      	mov	r0, r2
 8003aec:	4798      	blx	r3
 8003aee:	e074      	b.n	8003bda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	4a59      	ldr	r2, [pc, #356]	; (8003c5c <I2C_ITError+0x25c>)
 8003af6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fdd7 	bl	80016b0 <HAL_DMA_Abort_IT>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d068      	beq.n	8003bda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d10b      	bne.n	8003b2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
 8003b54:	e041      	b.n	8003bda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b60      	cmp	r3, #96	; 0x60
 8003b60:	d125      	bne.n	8003bae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d10b      	bne.n	8003b96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe fee0 	bl	800296c <HAL_I2C_AbortCpltCallback>
 8003bac:	e015      	b.n	8003bda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d10b      	bne.n	8003bd4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7fc fe3b 	bl	8000850 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d109      	bne.n	8003c08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d113      	bne.n	8003c54 <I2C_ITError+0x254>
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b28      	cmp	r3, #40	; 0x28
 8003c30:	d110      	bne.n	8003c54 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <I2C_ITError+0x260>)
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe fe6e 	bl	8002930 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	08003c65 	.word	0x08003c65
 8003c60:	ffff0000 	.word	0xffff0000

08003c64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c7e:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <I2C_DMAAbort+0x148>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <I2C_DMAAbort+0x14c>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0a1a      	lsrs	r2, r3, #8
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003caa:	e00a      	b.n	8003cc2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc0:	d0ea      	beq.n	8003c98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	2200      	movs	r2, #0
 8003cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	2200      	movs	r2, #0
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	2200      	movs	r2, #0
 8003d06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	2200      	movs	r2, #0
 8003d16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d10e      	bne.n	8003d52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d4a:	6978      	ldr	r0, [r7, #20]
 8003d4c:	f7fe fe0e 	bl	800296c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d50:	e027      	b.n	8003da2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d58:	2b28      	cmp	r3, #40	; 0x28
 8003d5a:	d117      	bne.n	8003d8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2228      	movs	r2, #40	; 0x28
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d8a:	e007      	b.n	8003d9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d9c:	6978      	ldr	r0, [r7, #20]
 8003d9e:	f7fc fd57 	bl	8000850 <HAL_I2C_ErrorCallback>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000004c 	.word	0x2000004c
 8003db0:	14f8b589 	.word	0x14f8b589

08003db4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	08db      	lsrs	r3, r3, #3
 8003dc6:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0a1a      	lsrs	r2, r3, #8
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d107      	bne.n	8003df2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e008      	b.n	8003e04 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e00:	d0e9      	beq.n	8003dd6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	2000004c 	.word	0x2000004c
 8003e14:	14f8b589 	.word	0x14f8b589

08003e18 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e28:	d103      	bne.n	8003e32 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e30:	e007      	b.n	8003e42 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e3a:	d102      	bne.n	8003e42 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2208      	movs	r2, #8
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cc      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90c      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e067      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4934      	ldr	r1, [pc, #208]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fd f9c6 	bl	80012d0 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd f9c2 	bl	80012d0 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e04f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b25      	ldr	r3, [pc, #148]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d20c      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f855 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd f926 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	08006638 	.word	0x08006638
 8004014:	2000004c 	.word	0x2000004c
 8004018:	20000050 	.word	0x20000050

0800401c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCC_GetHCLKFreq+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	2000004c 	.word	0x2000004c

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004038:	f7ff fff0 	bl	800401c <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0a9b      	lsrs	r3, r3, #10
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4903      	ldr	r1, [pc, #12]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40023800 	.word	0x40023800
 8004058:	08006648 	.word	0x08006648

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004060:	f7ff ffdc 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0b5b      	lsrs	r3, r3, #13
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	08006648 	.word	0x08006648

08004084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004088:	b0ae      	sub	sp, #184	; 0xb8
 800408a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040aa:	4bcb      	ldr	r3, [pc, #812]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	f200 8206 	bhi.w	80044c4 <HAL_RCC_GetSysClockFreq+0x440>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040f5 	.word	0x080040f5
 80040c4:	080044c5 	.word	0x080044c5
 80040c8:	080044c5 	.word	0x080044c5
 80040cc:	080044c5 	.word	0x080044c5
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	080044c5 	.word	0x080044c5
 80040d8:	080044c5 	.word	0x080044c5
 80040dc:	080044c5 	.word	0x080044c5
 80040e0:	08004105 	.word	0x08004105
 80040e4:	080044c5 	.word	0x080044c5
 80040e8:	080044c5 	.word	0x080044c5
 80040ec:	080044c5 	.word	0x080044c5
 80040f0:	080042f5 	.word	0x080042f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4bb9      	ldr	r3, [pc, #740]	; (80043dc <HAL_RCC_GetSysClockFreq+0x358>)
 80040f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80040fa:	e1e7      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fc:	4bb8      	ldr	r3, [pc, #736]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004102:	e1e3      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004104:	4bb4      	ldr	r3, [pc, #720]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004110:	4bb1      	ldr	r3, [pc, #708]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d071      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411c:	4bae      	ldr	r3, [pc, #696]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	2200      	movs	r2, #0
 8004124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004128:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800412c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800413e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004142:	4622      	mov	r2, r4
 8004144:	462b      	mov	r3, r5
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	0159      	lsls	r1, r3, #5
 8004150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004154:	0150      	lsls	r0, r2, #5
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4621      	mov	r1, r4
 800415c:	1a51      	subs	r1, r2, r1
 800415e:	6439      	str	r1, [r7, #64]	; 0x40
 8004160:	4629      	mov	r1, r5
 8004162:	eb63 0301 	sbc.w	r3, r3, r1
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004174:	4649      	mov	r1, r9
 8004176:	018b      	lsls	r3, r1, #6
 8004178:	4641      	mov	r1, r8
 800417a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417e:	4641      	mov	r1, r8
 8004180:	018a      	lsls	r2, r1, #6
 8004182:	4641      	mov	r1, r8
 8004184:	1a51      	subs	r1, r2, r1
 8004186:	63b9      	str	r1, [r7, #56]	; 0x38
 8004188:	4649      	mov	r1, r9
 800418a:	eb63 0301 	sbc.w	r3, r3, r1
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800419c:	4649      	mov	r1, r9
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4641      	mov	r1, r8
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4641      	mov	r1, r8
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4622      	mov	r2, r4
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
 80041b6:	462b      	mov	r3, r5
 80041b8:	460a      	mov	r2, r1
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041cc:	4629      	mov	r1, r5
 80041ce:	024b      	lsls	r3, r1, #9
 80041d0:	4621      	mov	r1, r4
 80041d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041d6:	4621      	mov	r1, r4
 80041d8:	024a      	lsls	r2, r1, #9
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80041f0:	f7fc f85e 	bl	80002b0 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4613      	mov	r3, r2
 80041fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041fe:	e067      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004200:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800420c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004218:	67bb      	str	r3, [r7, #120]	; 0x78
 800421a:	2300      	movs	r3, #0
 800421c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800421e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f04f 0000 	mov.w	r0, #0
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	0159      	lsls	r1, r3, #5
 8004230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004234:	0150      	lsls	r0, r2, #5
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4621      	mov	r1, r4
 800423c:	1a51      	subs	r1, r2, r1
 800423e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004240:	4629      	mov	r1, r5
 8004242:	eb63 0301 	sbc.w	r3, r3, r1
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004254:	4649      	mov	r1, r9
 8004256:	018b      	lsls	r3, r1, #6
 8004258:	4641      	mov	r1, r8
 800425a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425e:	4641      	mov	r1, r8
 8004260:	018a      	lsls	r2, r1, #6
 8004262:	4641      	mov	r1, r8
 8004264:	ebb2 0a01 	subs.w	sl, r2, r1
 8004268:	4649      	mov	r1, r9
 800426a:	eb63 0b01 	sbc.w	fp, r3, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800427a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800427e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004282:	4692      	mov	sl, r2
 8004284:	469b      	mov	fp, r3
 8004286:	4623      	mov	r3, r4
 8004288:	eb1a 0303 	adds.w	r3, sl, r3
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	462b      	mov	r3, r5
 8004290:	eb4b 0303 	adc.w	r3, fp, r3
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042a2:	4629      	mov	r1, r5
 80042a4:	028b      	lsls	r3, r1, #10
 80042a6:	4621      	mov	r1, r4
 80042a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042ac:	4621      	mov	r1, r4
 80042ae:	028a      	lsls	r2, r1, #10
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042b8:	2200      	movs	r2, #0
 80042ba:	673b      	str	r3, [r7, #112]	; 0x70
 80042bc:	677a      	str	r2, [r7, #116]	; 0x74
 80042be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042c2:	f7fb fff5 	bl	80002b0 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4613      	mov	r3, r2
 80042cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d0:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80042e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042f2:	e0eb      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f4:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d06b      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	2200      	movs	r2, #0
 8004314:	66bb      	str	r3, [r7, #104]	; 0x68
 8004316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	663b      	str	r3, [r7, #96]	; 0x60
 8004320:	2300      	movs	r3, #0
 8004322:	667b      	str	r3, [r7, #100]	; 0x64
 8004324:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004328:	4622      	mov	r2, r4
 800432a:	462b      	mov	r3, r5
 800432c:	f04f 0000 	mov.w	r0, #0
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	0159      	lsls	r1, r3, #5
 8004336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433a:	0150      	lsls	r0, r2, #5
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4621      	mov	r1, r4
 8004342:	1a51      	subs	r1, r2, r1
 8004344:	61b9      	str	r1, [r7, #24]
 8004346:	4629      	mov	r1, r5
 8004348:	eb63 0301 	sbc.w	r3, r3, r1
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800435a:	4659      	mov	r1, fp
 800435c:	018b      	lsls	r3, r1, #6
 800435e:	4651      	mov	r1, sl
 8004360:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004364:	4651      	mov	r1, sl
 8004366:	018a      	lsls	r2, r1, #6
 8004368:	4651      	mov	r1, sl
 800436a:	ebb2 0801 	subs.w	r8, r2, r1
 800436e:	4659      	mov	r1, fp
 8004370:	eb63 0901 	sbc.w	r9, r3, r1
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004380:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004384:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004388:	4690      	mov	r8, r2
 800438a:	4699      	mov	r9, r3
 800438c:	4623      	mov	r3, r4
 800438e:	eb18 0303 	adds.w	r3, r8, r3
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	462b      	mov	r3, r5
 8004396:	eb49 0303 	adc.w	r3, r9, r3
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043a8:	4629      	mov	r1, r5
 80043aa:	024b      	lsls	r3, r1, #9
 80043ac:	4621      	mov	r1, r4
 80043ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b2:	4621      	mov	r1, r4
 80043b4:	024a      	lsls	r2, r1, #9
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043be:	2200      	movs	r2, #0
 80043c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043c8:	f7fb ff72 	bl	80002b0 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d6:	e065      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x420>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00f42400 	.word	0x00f42400
 80043e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e4:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <HAL_RCC_GetSysClockFreq+0x458>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	099b      	lsrs	r3, r3, #6
 80043ea:	2200      	movs	r2, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	4611      	mov	r1, r2
 80043f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043f4:	653b      	str	r3, [r7, #80]	; 0x50
 80043f6:	2300      	movs	r3, #0
 80043f8:	657b      	str	r3, [r7, #84]	; 0x54
 80043fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80043fe:	4642      	mov	r2, r8
 8004400:	464b      	mov	r3, r9
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	0159      	lsls	r1, r3, #5
 800440c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004410:	0150      	lsls	r0, r2, #5
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4641      	mov	r1, r8
 8004418:	1a51      	subs	r1, r2, r1
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	4649      	mov	r1, r9
 800441e:	eb63 0301 	sbc.w	r3, r3, r1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004430:	4659      	mov	r1, fp
 8004432:	018b      	lsls	r3, r1, #6
 8004434:	4651      	mov	r1, sl
 8004436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800443a:	4651      	mov	r1, sl
 800443c:	018a      	lsls	r2, r1, #6
 800443e:	4651      	mov	r1, sl
 8004440:	1a54      	subs	r4, r2, r1
 8004442:	4659      	mov	r1, fp
 8004444:	eb63 0501 	sbc.w	r5, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	00eb      	lsls	r3, r5, #3
 8004452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004456:	00e2      	lsls	r2, r4, #3
 8004458:	4614      	mov	r4, r2
 800445a:	461d      	mov	r5, r3
 800445c:	4643      	mov	r3, r8
 800445e:	18e3      	adds	r3, r4, r3
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	464b      	mov	r3, r9
 8004464:	eb45 0303 	adc.w	r3, r5, r3
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004476:	4629      	mov	r1, r5
 8004478:	028b      	lsls	r3, r1, #10
 800447a:	4621      	mov	r1, r4
 800447c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004480:	4621      	mov	r1, r4
 8004482:	028a      	lsls	r2, r1, #10
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800448c:	2200      	movs	r2, #0
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004490:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004492:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004496:	f7fb ff0b 	bl	80002b0 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4613      	mov	r3, r2
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044a4:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <HAL_RCC_GetSysClockFreq+0x458>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	0f1b      	lsrs	r3, r3, #28
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80044b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044c2:	e003      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	37b8      	adds	r7, #184	; 0xb8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	00f42400 	.word	0x00f42400

080044e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e28d      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8083 	beq.w	800460a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004504:	4b94      	ldr	r3, [pc, #592]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b04      	cmp	r3, #4
 800450e:	d019      	beq.n	8004544 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004510:	4b91      	ldr	r3, [pc, #580]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004518:	2b08      	cmp	r3, #8
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800451c:	4b8e      	ldr	r3, [pc, #568]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004528:	d00c      	beq.n	8004544 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452a:	4b8b      	ldr	r3, [pc, #556]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d112      	bne.n	800455c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004542:	d10b      	bne.n	800455c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	4b84      	ldr	r3, [pc, #528]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05b      	beq.n	8004608 <HAL_RCC_OscConfig+0x124>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d157      	bne.n	8004608 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e25a      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d106      	bne.n	8004574 <HAL_RCC_OscConfig+0x90>
 8004566:	4b7c      	ldr	r3, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7b      	ldr	r2, [pc, #492]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xcc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0xb4>
 800457e:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a75      	ldr	r2, [pc, #468]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b73      	ldr	r3, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a72      	ldr	r2, [pc, #456]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xcc>
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6e      	ldr	r2, [pc, #440]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6b      	ldr	r2, [pc, #428]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fc fe8a 	bl	80012d0 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fc fe86 	bl	80012d0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e21f      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xdc>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fc fe76 	bl	80012d0 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fc fe72 	bl	80012d0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e20b      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	4b57      	ldr	r3, [pc, #348]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x104>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d06f      	beq.n	80046f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004616:	4b50      	ldr	r3, [pc, #320]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004622:	4b4d      	ldr	r3, [pc, #308]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d105      	bne.n	800463a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800462e:	4b4a      	ldr	r3, [pc, #296]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463a:	4b47      	ldr	r3, [pc, #284]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d11c      	bne.n	8004680 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b44      	ldr	r3, [pc, #272]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d116      	bne.n	8004680 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004652:	4b41      	ldr	r3, [pc, #260]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_RCC_OscConfig+0x186>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e1d3      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4937      	ldr	r1, [pc, #220]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	e03a      	b.n	80046f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004688:	4b34      	ldr	r3, [pc, #208]	; (800475c <HAL_RCC_OscConfig+0x278>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fc fe1f 	bl	80012d0 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004696:	f7fc fe1b 	bl	80012d0 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1b4      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b4:	4b28      	ldr	r3, [pc, #160]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4925      	ldr	r1, [pc, #148]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]
 80046c8:	e015      	b.n	80046f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_OscConfig+0x278>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fc fdfe 	bl	80012d0 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fc fdfa 	bl	80012d0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e193      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d036      	beq.n	8004770 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0x27c>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fc fdde 	bl	80012d0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004718:	f7fc fdda 	bl	80012d0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e173      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x234>
 8004736:	e01b      	b.n	8004770 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <HAL_RCC_OscConfig+0x27c>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473e:	f7fc fdc7 	bl	80012d0 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	e00e      	b.n	8004764 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004746:	f7fc fdc3 	bl	80012d0 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d907      	bls.n	8004764 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e15c      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
 8004758:	40023800 	.word	0x40023800
 800475c:	42470000 	.word	0x42470000
 8004760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	4b8a      	ldr	r3, [pc, #552]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1ea      	bne.n	8004746 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8097 	beq.w	80048ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	4b7f      	ldr	r3, [pc, #508]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a7e      	ldr	r2, [pc, #504]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b79      	ldr	r3, [pc, #484]	; (8004994 <HAL_RCC_OscConfig+0x4b0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d118      	bne.n	80047ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b76      	ldr	r3, [pc, #472]	; (8004994 <HAL_RCC_OscConfig+0x4b0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a75      	ldr	r2, [pc, #468]	; (8004994 <HAL_RCC_OscConfig+0x4b0>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fc fd83 	bl	80012d0 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fc fd7f 	bl	80012d0 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e118      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	4b6c      	ldr	r3, [pc, #432]	; (8004994 <HAL_RCC_OscConfig+0x4b0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x31e>
 80047f4:	4b66      	ldr	r3, [pc, #408]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a65      	ldr	r2, [pc, #404]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e01c      	b.n	800483c <HAL_RCC_OscConfig+0x358>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b05      	cmp	r3, #5
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x340>
 800480a:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4a60      	ldr	r2, [pc, #384]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004810:	f043 0304 	orr.w	r3, r3, #4
 8004814:	6713      	str	r3, [r2, #112]	; 0x70
 8004816:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
 8004822:	e00b      	b.n	800483c <HAL_RCC_OscConfig+0x358>
 8004824:	4b5a      	ldr	r3, [pc, #360]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	4a59      	ldr	r2, [pc, #356]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	6713      	str	r3, [r2, #112]	; 0x70
 8004830:	4b57      	ldr	r3, [pc, #348]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	4a56      	ldr	r2, [pc, #344]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004836:	f023 0304 	bic.w	r3, r3, #4
 800483a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fc fd44 	bl	80012d0 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fc fd40 	bl	80012d0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0d7      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0ee      	beq.n	800484c <HAL_RCC_OscConfig+0x368>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fc fd2e 	bl	80012d0 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fc fd2a 	bl	80012d0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0c1      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	4b40      	ldr	r3, [pc, #256]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ee      	bne.n	8004878 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a0:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	4a3a      	ldr	r2, [pc, #232]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 80048a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80ad 	beq.w	8004a10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d060      	beq.n	8004984 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d145      	bne.n	8004956 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b33      	ldr	r3, [pc, #204]	; (8004998 <HAL_RCC_OscConfig+0x4b4>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fc fcfe 	bl	80012d0 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fc fcfa 	bl	80012d0 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e093      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	4b29      	ldr	r3, [pc, #164]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	3b01      	subs	r3, #1
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	491b      	ldr	r1, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x4b4>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fc fccf 	bl	80012d0 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004936:	f7fc fccb 	bl	80012d0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e064      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004948:	4b11      	ldr	r3, [pc, #68]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x452>
 8004954:	e05c      	b.n	8004a10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_RCC_OscConfig+0x4b4>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fc fcb8 	bl	80012d0 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004964:	f7fc fcb4 	bl	80012d0 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e04d      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x480>
 8004982:	e045      	b.n	8004a10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e040      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
 8004990:	40023800 	.word	0x40023800
 8004994:	40007000 	.word	0x40007000
 8004998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800499c:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <HAL_RCC_OscConfig+0x538>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d030      	beq.n	8004a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d129      	bne.n	8004a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d122      	bne.n	8004a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d119      	bne.n	8004a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	3b01      	subs	r3, #1
 80049e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d10f      	bne.n	8004a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800

08004a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07b      	b.n	8004b2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fc f972 	bl	8000d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0104 	and.w	r1, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	f003 0210 	and.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10f      	bne.n	8004b78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
    return;
 8004b76:	e0d7      	b.n	8004d28 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_SPI_IRQHandler+0x66>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	09db      	lsrs	r3, r3, #7
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
    return;
 8004b98:	e0c6      	b.n	8004d28 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_SPI_IRQHandler+0x8c>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80b4 	beq.w	8004d28 <HAL_SPI_IRQHandler+0x1f4>
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80ad 	beq.w	8004d28 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d023      	beq.n	8004c22 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d011      	beq.n	8004c0a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f043 0204 	orr.w	r2, r3, #4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	e00b      	b.n	8004c22 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	693b      	ldr	r3, [r7, #16]
        return;
 8004c20:	e082      	b.n	8004d28 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d014      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f043 0208 	orr.w	r2, r3, #8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c70:	2300      	movs	r3, #0
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d04f      	beq.n	8004d26 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c94:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_SPI_IRQHandler+0x17e>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d034      	beq.n	8004d1c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0203 	bic.w	r2, r2, #3
 8004cc0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_SPI_IRQHandler+0x1fc>)
 8004cd0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fc fcea 	bl	80016b0 <HAL_DMA_Abort_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <HAL_SPI_IRQHandler+0x1fc>)
 8004cfc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fc fcd4 	bl	80016b0 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004d1a:	e003      	b.n	8004d24 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f809 	bl	8004d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d22:	e000      	b.n	8004d26 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004d24:	bf00      	nop
    return;
 8004d26:	bf00      	nop
  }
}
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	08004d49 	.word	0x08004d49

08004d34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff ffe6 	bl	8004d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e03f      	b.n	8004e02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc f8c4 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2224      	movs	r2, #36	; 0x24
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f929 	bl	800500c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b08a      	sub	sp, #40	; 0x28
 8004e0e:	af02      	add	r7, sp, #8
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d17c      	bne.n	8004f24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_UART_Transmit+0x2c>
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e075      	b.n	8004f26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_UART_Transmit+0x3e>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e06e      	b.n	8004f26 <HAL_UART_Transmit+0x11c>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2221      	movs	r2, #33	; 0x21
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e5e:	f7fc fa37 	bl	80012d0 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	88fa      	ldrh	r2, [r7, #6]
 8004e6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e78:	d108      	bne.n	8004e8c <HAL_UART_Transmit+0x82>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e003      	b.n	8004e94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e9c:	e02a      	b.n	8004ef4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2180      	movs	r1, #128	; 0x80
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f840 	bl	8004f2e <UART_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e036      	b.n	8004f26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ecc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	e007      	b.n	8004ee6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	781a      	ldrb	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1cf      	bne.n	8004e9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2140      	movs	r1, #64	; 0x40
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f810 	bl	8004f2e <UART_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e006      	b.n	8004f26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e000      	b.n	8004f26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
  }
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3720      	adds	r7, #32
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b090      	sub	sp, #64	; 0x40
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3e:	e050      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d04c      	beq.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4e:	f7fc f9bf 	bl	80012d0 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d241      	bcs.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f7e:	637a      	str	r2, [r7, #52]	; 0x34
 8004f80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3314      	adds	r3, #20
 8004f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3314      	adds	r3, #20
 8004fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb2:	623a      	str	r2, [r7, #32]
 8004fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	69f9      	ldr	r1, [r7, #28]
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e00f      	b.n	8005002 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d09f      	beq.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3740      	adds	r7, #64	; 0x40
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800500c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005010:	b0c0      	sub	sp, #256	; 0x100
 8005012:	af00      	add	r7, sp, #0
 8005014:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	68d9      	ldr	r1, [r3, #12]
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	ea40 0301 	orr.w	r3, r0, r1
 8005034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	431a      	orrs	r2, r3
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	431a      	orrs	r2, r3
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005064:	f021 010c 	bic.w	r1, r1, #12
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005072:	430b      	orrs	r3, r1
 8005074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	6999      	ldr	r1, [r3, #24]
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	ea40 0301 	orr.w	r3, r0, r1
 8005092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b8f      	ldr	r3, [pc, #572]	; (80052d8 <UART_SetConfig+0x2cc>)
 800509c:	429a      	cmp	r2, r3
 800509e:	d005      	beq.n	80050ac <UART_SetConfig+0xa0>
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b8d      	ldr	r3, [pc, #564]	; (80052dc <UART_SetConfig+0x2d0>)
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d104      	bne.n	80050b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ac:	f7fe ffd6 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 80050b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050b4:	e003      	b.n	80050be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050b6:	f7fe ffbd 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 80050ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	f040 810c 	bne.w	80052e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050de:	4622      	mov	r2, r4
 80050e0:	462b      	mov	r3, r5
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80050e6:	415b      	adcs	r3, r3
 80050e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ee:	4621      	mov	r1, r4
 80050f0:	eb12 0801 	adds.w	r8, r2, r1
 80050f4:	4629      	mov	r1, r5
 80050f6:	eb43 0901 	adc.w	r9, r3, r1
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800510a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800510e:	4690      	mov	r8, r2
 8005110:	4699      	mov	r9, r3
 8005112:	4623      	mov	r3, r4
 8005114:	eb18 0303 	adds.w	r3, r8, r3
 8005118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800511c:	462b      	mov	r3, r5
 800511e:	eb49 0303 	adc.w	r3, r9, r3
 8005122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005132:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800513a:	460b      	mov	r3, r1
 800513c:	18db      	adds	r3, r3, r3
 800513e:	653b      	str	r3, [r7, #80]	; 0x50
 8005140:	4613      	mov	r3, r2
 8005142:	eb42 0303 	adc.w	r3, r2, r3
 8005146:	657b      	str	r3, [r7, #84]	; 0x54
 8005148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800514c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005150:	f7fb f8ae 	bl	80002b0 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4b61      	ldr	r3, [pc, #388]	; (80052e0 <UART_SetConfig+0x2d4>)
 800515a:	fba3 2302 	umull	r2, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	011c      	lsls	r4, r3, #4
 8005162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005166:	2200      	movs	r2, #0
 8005168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800516c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	1891      	adds	r1, r2, r2
 800517a:	64b9      	str	r1, [r7, #72]	; 0x48
 800517c:	415b      	adcs	r3, r3
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005184:	4641      	mov	r1, r8
 8005186:	eb12 0a01 	adds.w	sl, r2, r1
 800518a:	4649      	mov	r1, r9
 800518c:	eb43 0b01 	adc.w	fp, r3, r1
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800519c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a4:	4692      	mov	sl, r2
 80051a6:	469b      	mov	fp, r3
 80051a8:	4643      	mov	r3, r8
 80051aa:	eb1a 0303 	adds.w	r3, sl, r3
 80051ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051b2:	464b      	mov	r3, r9
 80051b4:	eb4b 0303 	adc.w	r3, fp, r3
 80051b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051d0:	460b      	mov	r3, r1
 80051d2:	18db      	adds	r3, r3, r3
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
 80051d6:	4613      	mov	r3, r2
 80051d8:	eb42 0303 	adc.w	r3, r2, r3
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
 80051de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051e6:	f7fb f863 	bl	80002b0 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	4b3b      	ldr	r3, [pc, #236]	; (80052e0 <UART_SetConfig+0x2d4>)
 80051f2:	fba3 2301 	umull	r2, r3, r3, r1
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2264      	movs	r2, #100	; 0x64
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	1acb      	subs	r3, r1, r3
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005206:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <UART_SetConfig+0x2d4>)
 8005208:	fba3 2302 	umull	r2, r3, r3, r2
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005214:	441c      	add	r4, r3
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005220:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	1891      	adds	r1, r2, r2
 800522e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005230:	415b      	adcs	r3, r3
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005238:	4641      	mov	r1, r8
 800523a:	1851      	adds	r1, r2, r1
 800523c:	6339      	str	r1, [r7, #48]	; 0x30
 800523e:	4649      	mov	r1, r9
 8005240:	414b      	adcs	r3, r1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005250:	4659      	mov	r1, fp
 8005252:	00cb      	lsls	r3, r1, #3
 8005254:	4651      	mov	r1, sl
 8005256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525a:	4651      	mov	r1, sl
 800525c:	00ca      	lsls	r2, r1, #3
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	4603      	mov	r3, r0
 8005264:	4642      	mov	r2, r8
 8005266:	189b      	adds	r3, r3, r2
 8005268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800526c:	464b      	mov	r3, r9
 800526e:	460a      	mov	r2, r1
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005284:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800528c:	460b      	mov	r3, r1
 800528e:	18db      	adds	r3, r3, r3
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
 8005292:	4613      	mov	r3, r2
 8005294:	eb42 0303 	adc.w	r3, r2, r3
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800529e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052a2:	f7fb f805 	bl	80002b0 <__aeabi_uldivmod>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <UART_SetConfig+0x2d4>)
 80052ac:	fba3 1302 	umull	r1, r3, r3, r2
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	2164      	movs	r1, #100	; 0x64
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	3332      	adds	r3, #50	; 0x32
 80052be:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <UART_SetConfig+0x2d4>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	f003 0207 	and.w	r2, r3, #7
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4422      	add	r2, r4
 80052d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052d4:	e105      	b.n	80054e2 <UART_SetConfig+0x4d6>
 80052d6:	bf00      	nop
 80052d8:	40011000 	.word	0x40011000
 80052dc:	40011400 	.word	0x40011400
 80052e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052f6:	4642      	mov	r2, r8
 80052f8:	464b      	mov	r3, r9
 80052fa:	1891      	adds	r1, r2, r2
 80052fc:	6239      	str	r1, [r7, #32]
 80052fe:	415b      	adcs	r3, r3
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005306:	4641      	mov	r1, r8
 8005308:	1854      	adds	r4, r2, r1
 800530a:	4649      	mov	r1, r9
 800530c:	eb43 0501 	adc.w	r5, r3, r1
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	00eb      	lsls	r3, r5, #3
 800531a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800531e:	00e2      	lsls	r2, r4, #3
 8005320:	4614      	mov	r4, r2
 8005322:	461d      	mov	r5, r3
 8005324:	4643      	mov	r3, r8
 8005326:	18e3      	adds	r3, r4, r3
 8005328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800532c:	464b      	mov	r3, r9
 800532e:	eb45 0303 	adc.w	r3, r5, r3
 8005332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005352:	4629      	mov	r1, r5
 8005354:	008b      	lsls	r3, r1, #2
 8005356:	4621      	mov	r1, r4
 8005358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800535c:	4621      	mov	r1, r4
 800535e:	008a      	lsls	r2, r1, #2
 8005360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005364:	f7fa ffa4 	bl	80002b0 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4b60      	ldr	r3, [pc, #384]	; (80054f0 <UART_SetConfig+0x4e4>)
 800536e:	fba3 2302 	umull	r2, r3, r3, r2
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	011c      	lsls	r4, r3, #4
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005380:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	61b9      	str	r1, [r7, #24]
 8005390:	415b      	adcs	r3, r3
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005398:	4641      	mov	r1, r8
 800539a:	1851      	adds	r1, r2, r1
 800539c:	6139      	str	r1, [r7, #16]
 800539e:	4649      	mov	r1, r9
 80053a0:	414b      	adcs	r3, r1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b0:	4659      	mov	r1, fp
 80053b2:	00cb      	lsls	r3, r1, #3
 80053b4:	4651      	mov	r1, sl
 80053b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ba:	4651      	mov	r1, sl
 80053bc:	00ca      	lsls	r2, r1, #3
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	4642      	mov	r2, r8
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053cc:	464b      	mov	r3, r9
 80053ce:	460a      	mov	r2, r1
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053f0:	4649      	mov	r1, r9
 80053f2:	008b      	lsls	r3, r1, #2
 80053f4:	4641      	mov	r1, r8
 80053f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053fa:	4641      	mov	r1, r8
 80053fc:	008a      	lsls	r2, r1, #2
 80053fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005402:	f7fa ff55 	bl	80002b0 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <UART_SetConfig+0x4e4>)
 800540c:	fba3 1302 	umull	r1, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	2164      	movs	r1, #100	; 0x64
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	3332      	adds	r3, #50	; 0x32
 800541e:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <UART_SetConfig+0x4e4>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542a:	441c      	add	r4, r3
 800542c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005430:	2200      	movs	r2, #0
 8005432:	673b      	str	r3, [r7, #112]	; 0x70
 8005434:	677a      	str	r2, [r7, #116]	; 0x74
 8005436:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800543a:	4642      	mov	r2, r8
 800543c:	464b      	mov	r3, r9
 800543e:	1891      	adds	r1, r2, r2
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	415b      	adcs	r3, r3
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800544a:	4641      	mov	r1, r8
 800544c:	1851      	adds	r1, r2, r1
 800544e:	6039      	str	r1, [r7, #0]
 8005450:	4649      	mov	r1, r9
 8005452:	414b      	adcs	r3, r1
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005462:	4659      	mov	r1, fp
 8005464:	00cb      	lsls	r3, r1, #3
 8005466:	4651      	mov	r1, sl
 8005468:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546c:	4651      	mov	r1, sl
 800546e:	00ca      	lsls	r2, r1, #3
 8005470:	4610      	mov	r0, r2
 8005472:	4619      	mov	r1, r3
 8005474:	4603      	mov	r3, r0
 8005476:	4642      	mov	r2, r8
 8005478:	189b      	adds	r3, r3, r2
 800547a:	66bb      	str	r3, [r7, #104]	; 0x68
 800547c:	464b      	mov	r3, r9
 800547e:	460a      	mov	r2, r1
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	663b      	str	r3, [r7, #96]	; 0x60
 8005490:	667a      	str	r2, [r7, #100]	; 0x64
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800549e:	4649      	mov	r1, r9
 80054a0:	008b      	lsls	r3, r1, #2
 80054a2:	4641      	mov	r1, r8
 80054a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a8:	4641      	mov	r1, r8
 80054aa:	008a      	lsls	r2, r1, #2
 80054ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054b0:	f7fa fefe 	bl	80002b0 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <UART_SetConfig+0x4e4>)
 80054ba:	fba3 1302 	umull	r1, r3, r3, r2
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	2164      	movs	r1, #100	; 0x64
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	3332      	adds	r3, #50	; 0x32
 80054cc:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <UART_SetConfig+0x4e4>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4422      	add	r2, r4
 80054e0:	609a      	str	r2, [r3, #8]
}
 80054e2:	bf00      	nop
 80054e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054e8:	46bd      	mov	sp, r7
 80054ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ee:	bf00      	nop
 80054f0:	51eb851f 	.word	0x51eb851f

080054f4 <__errno>:
 80054f4:	4b01      	ldr	r3, [pc, #4]	; (80054fc <__errno+0x8>)
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000058 	.word	0x20000058

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4d0d      	ldr	r5, [pc, #52]	; (8005538 <__libc_init_array+0x38>)
 8005504:	4c0d      	ldr	r4, [pc, #52]	; (800553c <__libc_init_array+0x3c>)
 8005506:	1b64      	subs	r4, r4, r5
 8005508:	10a4      	asrs	r4, r4, #2
 800550a:	2600      	movs	r6, #0
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	4d0b      	ldr	r5, [pc, #44]	; (8005540 <__libc_init_array+0x40>)
 8005512:	4c0c      	ldr	r4, [pc, #48]	; (8005544 <__libc_init_array+0x44>)
 8005514:	f001 f824 	bl	8006560 <_init>
 8005518:	1b64      	subs	r4, r4, r5
 800551a:	10a4      	asrs	r4, r4, #2
 800551c:	2600      	movs	r6, #0
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	080066f8 	.word	0x080066f8
 800553c:	080066f8 	.word	0x080066f8
 8005540:	080066f8 	.word	0x080066f8
 8005544:	080066fc 	.word	0x080066fc

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <iprintf>:
 8005558:	b40f      	push	{r0, r1, r2, r3}
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <iprintf+0x2c>)
 800555c:	b513      	push	{r0, r1, r4, lr}
 800555e:	681c      	ldr	r4, [r3, #0]
 8005560:	b124      	cbz	r4, 800556c <iprintf+0x14>
 8005562:	69a3      	ldr	r3, [r4, #24]
 8005564:	b913      	cbnz	r3, 800556c <iprintf+0x14>
 8005566:	4620      	mov	r0, r4
 8005568:	f000 fa5e 	bl	8005a28 <__sinit>
 800556c:	ab05      	add	r3, sp, #20
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	68a1      	ldr	r1, [r4, #8]
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fc67 	bl	8005e48 <_vfiprintf_r>
 800557a:	b002      	add	sp, #8
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	b004      	add	sp, #16
 8005582:	4770      	bx	lr
 8005584:	20000058 	.word	0x20000058

08005588 <_puts_r>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	460e      	mov	r6, r1
 800558c:	4605      	mov	r5, r0
 800558e:	b118      	cbz	r0, 8005598 <_puts_r+0x10>
 8005590:	6983      	ldr	r3, [r0, #24]
 8005592:	b90b      	cbnz	r3, 8005598 <_puts_r+0x10>
 8005594:	f000 fa48 	bl	8005a28 <__sinit>
 8005598:	69ab      	ldr	r3, [r5, #24]
 800559a:	68ac      	ldr	r4, [r5, #8]
 800559c:	b913      	cbnz	r3, 80055a4 <_puts_r+0x1c>
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 fa42 	bl	8005a28 <__sinit>
 80055a4:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <_puts_r+0xd0>)
 80055a6:	429c      	cmp	r4, r3
 80055a8:	d120      	bne.n	80055ec <_puts_r+0x64>
 80055aa:	686c      	ldr	r4, [r5, #4]
 80055ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ae:	07db      	lsls	r3, r3, #31
 80055b0:	d405      	bmi.n	80055be <_puts_r+0x36>
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	0598      	lsls	r0, r3, #22
 80055b6:	d402      	bmi.n	80055be <_puts_r+0x36>
 80055b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ba:	f000 fad3 	bl	8005b64 <__retarget_lock_acquire_recursive>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	0719      	lsls	r1, r3, #28
 80055c2:	d51d      	bpl.n	8005600 <_puts_r+0x78>
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	b1db      	cbz	r3, 8005600 <_puts_r+0x78>
 80055c8:	3e01      	subs	r6, #1
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055d0:	3b01      	subs	r3, #1
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	bb39      	cbnz	r1, 8005626 <_puts_r+0x9e>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da38      	bge.n	800564c <_puts_r+0xc4>
 80055da:	4622      	mov	r2, r4
 80055dc:	210a      	movs	r1, #10
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f848 	bl	8005674 <__swbuf_r>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d011      	beq.n	800560c <_puts_r+0x84>
 80055e8:	250a      	movs	r5, #10
 80055ea:	e011      	b.n	8005610 <_puts_r+0x88>
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <_puts_r+0xd4>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d101      	bne.n	80055f6 <_puts_r+0x6e>
 80055f2:	68ac      	ldr	r4, [r5, #8]
 80055f4:	e7da      	b.n	80055ac <_puts_r+0x24>
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <_puts_r+0xd8>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	bf08      	it	eq
 80055fc:	68ec      	ldreq	r4, [r5, #12]
 80055fe:	e7d5      	b.n	80055ac <_puts_r+0x24>
 8005600:	4621      	mov	r1, r4
 8005602:	4628      	mov	r0, r5
 8005604:	f000 f888 	bl	8005718 <__swsetup_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	d0dd      	beq.n	80055c8 <_puts_r+0x40>
 800560c:	f04f 35ff 	mov.w	r5, #4294967295
 8005610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005612:	07da      	lsls	r2, r3, #31
 8005614:	d405      	bmi.n	8005622 <_puts_r+0x9a>
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	059b      	lsls	r3, r3, #22
 800561a:	d402      	bmi.n	8005622 <_puts_r+0x9a>
 800561c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561e:	f000 faa2 	bl	8005b66 <__retarget_lock_release_recursive>
 8005622:	4628      	mov	r0, r5
 8005624:	bd70      	pop	{r4, r5, r6, pc}
 8005626:	2b00      	cmp	r3, #0
 8005628:	da04      	bge.n	8005634 <_puts_r+0xac>
 800562a:	69a2      	ldr	r2, [r4, #24]
 800562c:	429a      	cmp	r2, r3
 800562e:	dc06      	bgt.n	800563e <_puts_r+0xb6>
 8005630:	290a      	cmp	r1, #10
 8005632:	d004      	beq.n	800563e <_puts_r+0xb6>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	6022      	str	r2, [r4, #0]
 800563a:	7019      	strb	r1, [r3, #0]
 800563c:	e7c5      	b.n	80055ca <_puts_r+0x42>
 800563e:	4622      	mov	r2, r4
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f817 	bl	8005674 <__swbuf_r>
 8005646:	3001      	adds	r0, #1
 8005648:	d1bf      	bne.n	80055ca <_puts_r+0x42>
 800564a:	e7df      	b.n	800560c <_puts_r+0x84>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	250a      	movs	r5, #10
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	6022      	str	r2, [r4, #0]
 8005654:	701d      	strb	r5, [r3, #0]
 8005656:	e7db      	b.n	8005610 <_puts_r+0x88>
 8005658:	0800667c 	.word	0x0800667c
 800565c:	0800669c 	.word	0x0800669c
 8005660:	0800665c 	.word	0x0800665c

08005664 <puts>:
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <puts+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f7ff bf8d 	b.w	8005588 <_puts_r>
 800566e:	bf00      	nop
 8005670:	20000058 	.word	0x20000058

08005674 <__swbuf_r>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	460e      	mov	r6, r1
 8005678:	4614      	mov	r4, r2
 800567a:	4605      	mov	r5, r0
 800567c:	b118      	cbz	r0, 8005686 <__swbuf_r+0x12>
 800567e:	6983      	ldr	r3, [r0, #24]
 8005680:	b90b      	cbnz	r3, 8005686 <__swbuf_r+0x12>
 8005682:	f000 f9d1 	bl	8005a28 <__sinit>
 8005686:	4b21      	ldr	r3, [pc, #132]	; (800570c <__swbuf_r+0x98>)
 8005688:	429c      	cmp	r4, r3
 800568a:	d12b      	bne.n	80056e4 <__swbuf_r+0x70>
 800568c:	686c      	ldr	r4, [r5, #4]
 800568e:	69a3      	ldr	r3, [r4, #24]
 8005690:	60a3      	str	r3, [r4, #8]
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	071a      	lsls	r2, r3, #28
 8005696:	d52f      	bpl.n	80056f8 <__swbuf_r+0x84>
 8005698:	6923      	ldr	r3, [r4, #16]
 800569a:	b36b      	cbz	r3, 80056f8 <__swbuf_r+0x84>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	6820      	ldr	r0, [r4, #0]
 80056a0:	1ac0      	subs	r0, r0, r3
 80056a2:	6963      	ldr	r3, [r4, #20]
 80056a4:	b2f6      	uxtb	r6, r6
 80056a6:	4283      	cmp	r3, r0
 80056a8:	4637      	mov	r7, r6
 80056aa:	dc04      	bgt.n	80056b6 <__swbuf_r+0x42>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 f926 	bl	8005900 <_fflush_r>
 80056b4:	bb30      	cbnz	r0, 8005704 <__swbuf_r+0x90>
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	60a3      	str	r3, [r4, #8]
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	701e      	strb	r6, [r3, #0]
 80056c4:	6963      	ldr	r3, [r4, #20]
 80056c6:	3001      	adds	r0, #1
 80056c8:	4283      	cmp	r3, r0
 80056ca:	d004      	beq.n	80056d6 <__swbuf_r+0x62>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	07db      	lsls	r3, r3, #31
 80056d0:	d506      	bpl.n	80056e0 <__swbuf_r+0x6c>
 80056d2:	2e0a      	cmp	r6, #10
 80056d4:	d104      	bne.n	80056e0 <__swbuf_r+0x6c>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 f911 	bl	8005900 <_fflush_r>
 80056de:	b988      	cbnz	r0, 8005704 <__swbuf_r+0x90>
 80056e0:	4638      	mov	r0, r7
 80056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <__swbuf_r+0x9c>)
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d101      	bne.n	80056ee <__swbuf_r+0x7a>
 80056ea:	68ac      	ldr	r4, [r5, #8]
 80056ec:	e7cf      	b.n	800568e <__swbuf_r+0x1a>
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <__swbuf_r+0xa0>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	bf08      	it	eq
 80056f4:	68ec      	ldreq	r4, [r5, #12]
 80056f6:	e7ca      	b.n	800568e <__swbuf_r+0x1a>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f80c 	bl	8005718 <__swsetup_r>
 8005700:	2800      	cmp	r0, #0
 8005702:	d0cb      	beq.n	800569c <__swbuf_r+0x28>
 8005704:	f04f 37ff 	mov.w	r7, #4294967295
 8005708:	e7ea      	b.n	80056e0 <__swbuf_r+0x6c>
 800570a:	bf00      	nop
 800570c:	0800667c 	.word	0x0800667c
 8005710:	0800669c 	.word	0x0800669c
 8005714:	0800665c 	.word	0x0800665c

08005718 <__swsetup_r>:
 8005718:	4b32      	ldr	r3, [pc, #200]	; (80057e4 <__swsetup_r+0xcc>)
 800571a:	b570      	push	{r4, r5, r6, lr}
 800571c:	681d      	ldr	r5, [r3, #0]
 800571e:	4606      	mov	r6, r0
 8005720:	460c      	mov	r4, r1
 8005722:	b125      	cbz	r5, 800572e <__swsetup_r+0x16>
 8005724:	69ab      	ldr	r3, [r5, #24]
 8005726:	b913      	cbnz	r3, 800572e <__swsetup_r+0x16>
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f97d 	bl	8005a28 <__sinit>
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <__swsetup_r+0xd0>)
 8005730:	429c      	cmp	r4, r3
 8005732:	d10f      	bne.n	8005754 <__swsetup_r+0x3c>
 8005734:	686c      	ldr	r4, [r5, #4]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800573c:	0719      	lsls	r1, r3, #28
 800573e:	d42c      	bmi.n	800579a <__swsetup_r+0x82>
 8005740:	06dd      	lsls	r5, r3, #27
 8005742:	d411      	bmi.n	8005768 <__swsetup_r+0x50>
 8005744:	2309      	movs	r3, #9
 8005746:	6033      	str	r3, [r6, #0]
 8005748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800574c:	81a3      	strh	r3, [r4, #12]
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	e03e      	b.n	80057d2 <__swsetup_r+0xba>
 8005754:	4b25      	ldr	r3, [pc, #148]	; (80057ec <__swsetup_r+0xd4>)
 8005756:	429c      	cmp	r4, r3
 8005758:	d101      	bne.n	800575e <__swsetup_r+0x46>
 800575a:	68ac      	ldr	r4, [r5, #8]
 800575c:	e7eb      	b.n	8005736 <__swsetup_r+0x1e>
 800575e:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <__swsetup_r+0xd8>)
 8005760:	429c      	cmp	r4, r3
 8005762:	bf08      	it	eq
 8005764:	68ec      	ldreq	r4, [r5, #12]
 8005766:	e7e6      	b.n	8005736 <__swsetup_r+0x1e>
 8005768:	0758      	lsls	r0, r3, #29
 800576a:	d512      	bpl.n	8005792 <__swsetup_r+0x7a>
 800576c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800576e:	b141      	cbz	r1, 8005782 <__swsetup_r+0x6a>
 8005770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005774:	4299      	cmp	r1, r3
 8005776:	d002      	beq.n	800577e <__swsetup_r+0x66>
 8005778:	4630      	mov	r0, r6
 800577a:	f000 fa5b 	bl	8005c34 <_free_r>
 800577e:	2300      	movs	r3, #0
 8005780:	6363      	str	r3, [r4, #52]	; 0x34
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005788:	81a3      	strh	r3, [r4, #12]
 800578a:	2300      	movs	r3, #0
 800578c:	6063      	str	r3, [r4, #4]
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f043 0308 	orr.w	r3, r3, #8
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	b94b      	cbnz	r3, 80057b2 <__swsetup_r+0x9a>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a8:	d003      	beq.n	80057b2 <__swsetup_r+0x9a>
 80057aa:	4621      	mov	r1, r4
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 fa01 	bl	8005bb4 <__smakebuf_r>
 80057b2:	89a0      	ldrh	r0, [r4, #12]
 80057b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b8:	f010 0301 	ands.w	r3, r0, #1
 80057bc:	d00a      	beq.n	80057d4 <__swsetup_r+0xbc>
 80057be:	2300      	movs	r3, #0
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	6963      	ldr	r3, [r4, #20]
 80057c4:	425b      	negs	r3, r3
 80057c6:	61a3      	str	r3, [r4, #24]
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	b943      	cbnz	r3, 80057de <__swsetup_r+0xc6>
 80057cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057d0:	d1ba      	bne.n	8005748 <__swsetup_r+0x30>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	0781      	lsls	r1, r0, #30
 80057d6:	bf58      	it	pl
 80057d8:	6963      	ldrpl	r3, [r4, #20]
 80057da:	60a3      	str	r3, [r4, #8]
 80057dc:	e7f4      	b.n	80057c8 <__swsetup_r+0xb0>
 80057de:	2000      	movs	r0, #0
 80057e0:	e7f7      	b.n	80057d2 <__swsetup_r+0xba>
 80057e2:	bf00      	nop
 80057e4:	20000058 	.word	0x20000058
 80057e8:	0800667c 	.word	0x0800667c
 80057ec:	0800669c 	.word	0x0800669c
 80057f0:	0800665c 	.word	0x0800665c

080057f4 <__sflush_r>:
 80057f4:	898a      	ldrh	r2, [r1, #12]
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	0710      	lsls	r0, r2, #28
 80057fe:	460c      	mov	r4, r1
 8005800:	d458      	bmi.n	80058b4 <__sflush_r+0xc0>
 8005802:	684b      	ldr	r3, [r1, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	dc05      	bgt.n	8005814 <__sflush_r+0x20>
 8005808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	dc02      	bgt.n	8005814 <__sflush_r+0x20>
 800580e:	2000      	movs	r0, #0
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	2e00      	cmp	r6, #0
 8005818:	d0f9      	beq.n	800580e <__sflush_r+0x1a>
 800581a:	2300      	movs	r3, #0
 800581c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005820:	682f      	ldr	r7, [r5, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	d032      	beq.n	800588c <__sflush_r+0x98>
 8005826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	075a      	lsls	r2, r3, #29
 800582c:	d505      	bpl.n	800583a <__sflush_r+0x46>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005834:	b10b      	cbz	r3, 800583a <__sflush_r+0x46>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4602      	mov	r2, r0
 800583e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005840:	6a21      	ldr	r1, [r4, #32]
 8005842:	4628      	mov	r0, r5
 8005844:	47b0      	blx	r6
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	d106      	bne.n	800585a <__sflush_r+0x66>
 800584c:	6829      	ldr	r1, [r5, #0]
 800584e:	291d      	cmp	r1, #29
 8005850:	d82c      	bhi.n	80058ac <__sflush_r+0xb8>
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <__sflush_r+0x108>)
 8005854:	40ca      	lsrs	r2, r1
 8005856:	07d6      	lsls	r6, r2, #31
 8005858:	d528      	bpl.n	80058ac <__sflush_r+0xb8>
 800585a:	2200      	movs	r2, #0
 800585c:	6062      	str	r2, [r4, #4]
 800585e:	04d9      	lsls	r1, r3, #19
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	d504      	bpl.n	8005870 <__sflush_r+0x7c>
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	d101      	bne.n	800586e <__sflush_r+0x7a>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b903      	cbnz	r3, 8005870 <__sflush_r+0x7c>
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
 8005870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d0ca      	beq.n	800580e <__sflush_r+0x1a>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__sflush_r+0x92>
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f9d7 	bl	8005c34 <_free_r>
 8005886:	2000      	movs	r0, #0
 8005888:	6360      	str	r0, [r4, #52]	; 0x34
 800588a:	e7c1      	b.n	8005810 <__sflush_r+0x1c>
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	2301      	movs	r3, #1
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	1c41      	adds	r1, r0, #1
 8005896:	d1c7      	bne.n	8005828 <__sflush_r+0x34>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c4      	beq.n	8005828 <__sflush_r+0x34>
 800589e:	2b1d      	cmp	r3, #29
 80058a0:	d001      	beq.n	80058a6 <__sflush_r+0xb2>
 80058a2:	2b16      	cmp	r3, #22
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0xb6>
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	e7b1      	b.n	800580e <__sflush_r+0x1a>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7ad      	b.n	8005810 <__sflush_r+0x1c>
 80058b4:	690f      	ldr	r7, [r1, #16]
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d0a9      	beq.n	800580e <__sflush_r+0x1a>
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	680e      	ldr	r6, [r1, #0]
 80058be:	bf08      	it	eq
 80058c0:	694b      	ldreq	r3, [r1, #20]
 80058c2:	600f      	str	r7, [r1, #0]
 80058c4:	bf18      	it	ne
 80058c6:	2300      	movne	r3, #0
 80058c8:	eba6 0807 	sub.w	r8, r6, r7
 80058cc:	608b      	str	r3, [r1, #8]
 80058ce:	f1b8 0f00 	cmp.w	r8, #0
 80058d2:	dd9c      	ble.n	800580e <__sflush_r+0x1a>
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d8:	4643      	mov	r3, r8
 80058da:	463a      	mov	r2, r7
 80058dc:	4628      	mov	r0, r5
 80058de:	47b0      	blx	r6
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dc06      	bgt.n	80058f2 <__sflush_r+0xfe>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	e78e      	b.n	8005810 <__sflush_r+0x1c>
 80058f2:	4407      	add	r7, r0
 80058f4:	eba8 0800 	sub.w	r8, r8, r0
 80058f8:	e7e9      	b.n	80058ce <__sflush_r+0xda>
 80058fa:	bf00      	nop
 80058fc:	20400001 	.word	0x20400001

08005900 <_fflush_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	b913      	cbnz	r3, 8005910 <_fflush_r+0x10>
 800590a:	2500      	movs	r5, #0
 800590c:	4628      	mov	r0, r5
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	b118      	cbz	r0, 800591a <_fflush_r+0x1a>
 8005912:	6983      	ldr	r3, [r0, #24]
 8005914:	b90b      	cbnz	r3, 800591a <_fflush_r+0x1a>
 8005916:	f000 f887 	bl	8005a28 <__sinit>
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <_fflush_r+0x6c>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d11b      	bne.n	8005958 <_fflush_r+0x58>
 8005920:	686c      	ldr	r4, [r5, #4]
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <_fflush_r+0xa>
 800592a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800592c:	07d0      	lsls	r0, r2, #31
 800592e:	d404      	bmi.n	800593a <_fflush_r+0x3a>
 8005930:	0599      	lsls	r1, r3, #22
 8005932:	d402      	bmi.n	800593a <_fflush_r+0x3a>
 8005934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005936:	f000 f915 	bl	8005b64 <__retarget_lock_acquire_recursive>
 800593a:	4628      	mov	r0, r5
 800593c:	4621      	mov	r1, r4
 800593e:	f7ff ff59 	bl	80057f4 <__sflush_r>
 8005942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005944:	07da      	lsls	r2, r3, #31
 8005946:	4605      	mov	r5, r0
 8005948:	d4e0      	bmi.n	800590c <_fflush_r+0xc>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	d4dd      	bmi.n	800590c <_fflush_r+0xc>
 8005950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005952:	f000 f908 	bl	8005b66 <__retarget_lock_release_recursive>
 8005956:	e7d9      	b.n	800590c <_fflush_r+0xc>
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <_fflush_r+0x70>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <_fflush_r+0x62>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7df      	b.n	8005922 <_fflush_r+0x22>
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <_fflush_r+0x74>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7da      	b.n	8005922 <_fflush_r+0x22>
 800596c:	0800667c 	.word	0x0800667c
 8005970:	0800669c 	.word	0x0800669c
 8005974:	0800665c 	.word	0x0800665c

08005978 <std>:
 8005978:	2300      	movs	r3, #0
 800597a:	b510      	push	{r4, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	e9c0 3300 	strd	r3, r3, [r0]
 8005982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005986:	6083      	str	r3, [r0, #8]
 8005988:	8181      	strh	r1, [r0, #12]
 800598a:	6643      	str	r3, [r0, #100]	; 0x64
 800598c:	81c2      	strh	r2, [r0, #14]
 800598e:	6183      	str	r3, [r0, #24]
 8005990:	4619      	mov	r1, r3
 8005992:	2208      	movs	r2, #8
 8005994:	305c      	adds	r0, #92	; 0x5c
 8005996:	f7ff fdd7 	bl	8005548 <memset>
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <std+0x38>)
 800599c:	6263      	str	r3, [r4, #36]	; 0x24
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <std+0x3c>)
 80059a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <std+0x40>)
 80059a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <std+0x44>)
 80059a8:	6224      	str	r4, [r4, #32]
 80059aa:	6323      	str	r3, [r4, #48]	; 0x30
 80059ac:	bd10      	pop	{r4, pc}
 80059ae:	bf00      	nop
 80059b0:	080063f1 	.word	0x080063f1
 80059b4:	08006413 	.word	0x08006413
 80059b8:	0800644b 	.word	0x0800644b
 80059bc:	0800646f 	.word	0x0800646f

080059c0 <_cleanup_r>:
 80059c0:	4901      	ldr	r1, [pc, #4]	; (80059c8 <_cleanup_r+0x8>)
 80059c2:	f000 b8af 	b.w	8005b24 <_fwalk_reent>
 80059c6:	bf00      	nop
 80059c8:	08005901 	.word	0x08005901

080059cc <__sfmoreglue>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	2268      	movs	r2, #104	; 0x68
 80059d0:	1e4d      	subs	r5, r1, #1
 80059d2:	4355      	muls	r5, r2
 80059d4:	460e      	mov	r6, r1
 80059d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059da:	f000 f997 	bl	8005d0c <_malloc_r>
 80059de:	4604      	mov	r4, r0
 80059e0:	b140      	cbz	r0, 80059f4 <__sfmoreglue+0x28>
 80059e2:	2100      	movs	r1, #0
 80059e4:	e9c0 1600 	strd	r1, r6, [r0]
 80059e8:	300c      	adds	r0, #12
 80059ea:	60a0      	str	r0, [r4, #8]
 80059ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059f0:	f7ff fdaa 	bl	8005548 <memset>
 80059f4:	4620      	mov	r0, r4
 80059f6:	bd70      	pop	{r4, r5, r6, pc}

080059f8 <__sfp_lock_acquire>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__sfp_lock_acquire+0x8>)
 80059fa:	f000 b8b3 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000331 	.word	0x20000331

08005a04 <__sfp_lock_release>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__sfp_lock_release+0x8>)
 8005a06:	f000 b8ae 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20000331 	.word	0x20000331

08005a10 <__sinit_lock_acquire>:
 8005a10:	4801      	ldr	r0, [pc, #4]	; (8005a18 <__sinit_lock_acquire+0x8>)
 8005a12:	f000 b8a7 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 8005a16:	bf00      	nop
 8005a18:	20000332 	.word	0x20000332

08005a1c <__sinit_lock_release>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	; (8005a24 <__sinit_lock_release+0x8>)
 8005a1e:	f000 b8a2 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005a22:	bf00      	nop
 8005a24:	20000332 	.word	0x20000332

08005a28 <__sinit>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	f7ff fff0 	bl	8005a10 <__sinit_lock_acquire>
 8005a30:	69a3      	ldr	r3, [r4, #24]
 8005a32:	b11b      	cbz	r3, 8005a3c <__sinit+0x14>
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f7ff bff0 	b.w	8005a1c <__sinit_lock_release>
 8005a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a40:	6523      	str	r3, [r4, #80]	; 0x50
 8005a42:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <__sinit+0x68>)
 8005a44:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <__sinit+0x6c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	bf04      	itt	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	61a3      	streq	r3, [r4, #24]
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 f820 	bl	8005a98 <__sfp>
 8005a58:	6060      	str	r0, [r4, #4]
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f81c 	bl	8005a98 <__sfp>
 8005a60:	60a0      	str	r0, [r4, #8]
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f818 	bl	8005a98 <__sfp>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	60e0      	str	r0, [r4, #12]
 8005a6c:	2104      	movs	r1, #4
 8005a6e:	6860      	ldr	r0, [r4, #4]
 8005a70:	f7ff ff82 	bl	8005978 <std>
 8005a74:	68a0      	ldr	r0, [r4, #8]
 8005a76:	2201      	movs	r2, #1
 8005a78:	2109      	movs	r1, #9
 8005a7a:	f7ff ff7d 	bl	8005978 <std>
 8005a7e:	68e0      	ldr	r0, [r4, #12]
 8005a80:	2202      	movs	r2, #2
 8005a82:	2112      	movs	r1, #18
 8005a84:	f7ff ff78 	bl	8005978 <std>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	61a3      	str	r3, [r4, #24]
 8005a8c:	e7d2      	b.n	8005a34 <__sinit+0xc>
 8005a8e:	bf00      	nop
 8005a90:	08006658 	.word	0x08006658
 8005a94:	080059c1 	.word	0x080059c1

08005a98 <__sfp>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	4607      	mov	r7, r0
 8005a9c:	f7ff ffac 	bl	80059f8 <__sfp_lock_acquire>
 8005aa0:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <__sfp+0x84>)
 8005aa2:	681e      	ldr	r6, [r3, #0]
 8005aa4:	69b3      	ldr	r3, [r6, #24]
 8005aa6:	b913      	cbnz	r3, 8005aae <__sfp+0x16>
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff ffbd 	bl	8005a28 <__sinit>
 8005aae:	3648      	adds	r6, #72	; 0x48
 8005ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	d503      	bpl.n	8005ac0 <__sfp+0x28>
 8005ab8:	6833      	ldr	r3, [r6, #0]
 8005aba:	b30b      	cbz	r3, 8005b00 <__sfp+0x68>
 8005abc:	6836      	ldr	r6, [r6, #0]
 8005abe:	e7f7      	b.n	8005ab0 <__sfp+0x18>
 8005ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ac4:	b9d5      	cbnz	r5, 8005afc <__sfp+0x64>
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <__sfp+0x88>)
 8005ac8:	60e3      	str	r3, [r4, #12]
 8005aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ace:	6665      	str	r5, [r4, #100]	; 0x64
 8005ad0:	f000 f847 	bl	8005b62 <__retarget_lock_init_recursive>
 8005ad4:	f7ff ff96 	bl	8005a04 <__sfp_lock_release>
 8005ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ae0:	6025      	str	r5, [r4, #0]
 8005ae2:	61a5      	str	r5, [r4, #24]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005aec:	f7ff fd2c 	bl	8005548 <memset>
 8005af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005af8:	4620      	mov	r0, r4
 8005afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afc:	3468      	adds	r4, #104	; 0x68
 8005afe:	e7d9      	b.n	8005ab4 <__sfp+0x1c>
 8005b00:	2104      	movs	r1, #4
 8005b02:	4638      	mov	r0, r7
 8005b04:	f7ff ff62 	bl	80059cc <__sfmoreglue>
 8005b08:	4604      	mov	r4, r0
 8005b0a:	6030      	str	r0, [r6, #0]
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d1d5      	bne.n	8005abc <__sfp+0x24>
 8005b10:	f7ff ff78 	bl	8005a04 <__sfp_lock_release>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	e7ee      	b.n	8005af8 <__sfp+0x60>
 8005b1a:	bf00      	nop
 8005b1c:	08006658 	.word	0x08006658
 8005b20:	ffff0001 	.word	0xffff0001

08005b24 <_fwalk_reent>:
 8005b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	4606      	mov	r6, r0
 8005b2a:	4688      	mov	r8, r1
 8005b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b30:	2700      	movs	r7, #0
 8005b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b36:	f1b9 0901 	subs.w	r9, r9, #1
 8005b3a:	d505      	bpl.n	8005b48 <_fwalk_reent+0x24>
 8005b3c:	6824      	ldr	r4, [r4, #0]
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	d1f7      	bne.n	8005b32 <_fwalk_reent+0xe>
 8005b42:	4638      	mov	r0, r7
 8005b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b48:	89ab      	ldrh	r3, [r5, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d907      	bls.n	8005b5e <_fwalk_reent+0x3a>
 8005b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b52:	3301      	adds	r3, #1
 8005b54:	d003      	beq.n	8005b5e <_fwalk_reent+0x3a>
 8005b56:	4629      	mov	r1, r5
 8005b58:	4630      	mov	r0, r6
 8005b5a:	47c0      	blx	r8
 8005b5c:	4307      	orrs	r7, r0
 8005b5e:	3568      	adds	r5, #104	; 0x68
 8005b60:	e7e9      	b.n	8005b36 <_fwalk_reent+0x12>

08005b62 <__retarget_lock_init_recursive>:
 8005b62:	4770      	bx	lr

08005b64 <__retarget_lock_acquire_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_release_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <__swhatbuf_r>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	460e      	mov	r6, r1
 8005b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b70:	2900      	cmp	r1, #0
 8005b72:	b096      	sub	sp, #88	; 0x58
 8005b74:	4614      	mov	r4, r2
 8005b76:	461d      	mov	r5, r3
 8005b78:	da08      	bge.n	8005b8c <__swhatbuf_r+0x24>
 8005b7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	061a      	lsls	r2, r3, #24
 8005b84:	d410      	bmi.n	8005ba8 <__swhatbuf_r+0x40>
 8005b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b8a:	e00e      	b.n	8005baa <__swhatbuf_r+0x42>
 8005b8c:	466a      	mov	r2, sp
 8005b8e:	f000 fc95 	bl	80064bc <_fstat_r>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	dbf1      	blt.n	8005b7a <__swhatbuf_r+0x12>
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ba0:	425a      	negs	r2, r3
 8005ba2:	415a      	adcs	r2, r3
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	e7ee      	b.n	8005b86 <__swhatbuf_r+0x1e>
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	2000      	movs	r0, #0
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	b016      	add	sp, #88	; 0x58
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bb4 <__smakebuf_r>:
 8005bb4:	898b      	ldrh	r3, [r1, #12]
 8005bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb8:	079d      	lsls	r5, r3, #30
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	d507      	bpl.n	8005bd0 <__smakebuf_r+0x1c>
 8005bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	6163      	str	r3, [r4, #20]
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	ab01      	add	r3, sp, #4
 8005bd2:	466a      	mov	r2, sp
 8005bd4:	f7ff ffc8 	bl	8005b68 <__swhatbuf_r>
 8005bd8:	9900      	ldr	r1, [sp, #0]
 8005bda:	4605      	mov	r5, r0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f000 f895 	bl	8005d0c <_malloc_r>
 8005be2:	b948      	cbnz	r0, 8005bf8 <__smakebuf_r+0x44>
 8005be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be8:	059a      	lsls	r2, r3, #22
 8005bea:	d4ef      	bmi.n	8005bcc <__smakebuf_r+0x18>
 8005bec:	f023 0303 	bic.w	r3, r3, #3
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	e7e3      	b.n	8005bc0 <__smakebuf_r+0xc>
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <__smakebuf_r+0x7c>)
 8005bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	6020      	str	r0, [r4, #0]
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	81a3      	strh	r3, [r4, #12]
 8005c06:	9b00      	ldr	r3, [sp, #0]
 8005c08:	6163      	str	r3, [r4, #20]
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	6120      	str	r0, [r4, #16]
 8005c0e:	b15b      	cbz	r3, 8005c28 <__smakebuf_r+0x74>
 8005c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c14:	4630      	mov	r0, r6
 8005c16:	f000 fc63 	bl	80064e0 <_isatty_r>
 8005c1a:	b128      	cbz	r0, 8005c28 <__smakebuf_r+0x74>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	89a0      	ldrh	r0, [r4, #12]
 8005c2a:	4305      	orrs	r5, r0
 8005c2c:	81a5      	strh	r5, [r4, #12]
 8005c2e:	e7cd      	b.n	8005bcc <__smakebuf_r+0x18>
 8005c30:	080059c1 	.word	0x080059c1

08005c34 <_free_r>:
 8005c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d044      	beq.n	8005cc4 <_free_r+0x90>
 8005c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3e:	9001      	str	r0, [sp, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f1a1 0404 	sub.w	r4, r1, #4
 8005c46:	bfb8      	it	lt
 8005c48:	18e4      	addlt	r4, r4, r3
 8005c4a:	f000 fc6b 	bl	8006524 <__malloc_lock>
 8005c4e:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <_free_r+0x94>)
 8005c50:	9801      	ldr	r0, [sp, #4]
 8005c52:	6813      	ldr	r3, [r2, #0]
 8005c54:	b933      	cbnz	r3, 8005c64 <_free_r+0x30>
 8005c56:	6063      	str	r3, [r4, #4]
 8005c58:	6014      	str	r4, [r2, #0]
 8005c5a:	b003      	add	sp, #12
 8005c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c60:	f000 bc66 	b.w	8006530 <__malloc_unlock>
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	d908      	bls.n	8005c7a <_free_r+0x46>
 8005c68:	6825      	ldr	r5, [r4, #0]
 8005c6a:	1961      	adds	r1, r4, r5
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	bf01      	itttt	eq
 8005c70:	6819      	ldreq	r1, [r3, #0]
 8005c72:	685b      	ldreq	r3, [r3, #4]
 8005c74:	1949      	addeq	r1, r1, r5
 8005c76:	6021      	streq	r1, [r4, #0]
 8005c78:	e7ed      	b.n	8005c56 <_free_r+0x22>
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	b10b      	cbz	r3, 8005c84 <_free_r+0x50>
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d9fa      	bls.n	8005c7a <_free_r+0x46>
 8005c84:	6811      	ldr	r1, [r2, #0]
 8005c86:	1855      	adds	r5, r2, r1
 8005c88:	42a5      	cmp	r5, r4
 8005c8a:	d10b      	bne.n	8005ca4 <_free_r+0x70>
 8005c8c:	6824      	ldr	r4, [r4, #0]
 8005c8e:	4421      	add	r1, r4
 8005c90:	1854      	adds	r4, r2, r1
 8005c92:	42a3      	cmp	r3, r4
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	d1e0      	bne.n	8005c5a <_free_r+0x26>
 8005c98:	681c      	ldr	r4, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	6053      	str	r3, [r2, #4]
 8005c9e:	4421      	add	r1, r4
 8005ca0:	6011      	str	r1, [r2, #0]
 8005ca2:	e7da      	b.n	8005c5a <_free_r+0x26>
 8005ca4:	d902      	bls.n	8005cac <_free_r+0x78>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	6003      	str	r3, [r0, #0]
 8005caa:	e7d6      	b.n	8005c5a <_free_r+0x26>
 8005cac:	6825      	ldr	r5, [r4, #0]
 8005cae:	1961      	adds	r1, r4, r5
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	bf04      	itt	eq
 8005cb4:	6819      	ldreq	r1, [r3, #0]
 8005cb6:	685b      	ldreq	r3, [r3, #4]
 8005cb8:	6063      	str	r3, [r4, #4]
 8005cba:	bf04      	itt	eq
 8005cbc:	1949      	addeq	r1, r1, r5
 8005cbe:	6021      	streq	r1, [r4, #0]
 8005cc0:	6054      	str	r4, [r2, #4]
 8005cc2:	e7ca      	b.n	8005c5a <_free_r+0x26>
 8005cc4:	b003      	add	sp, #12
 8005cc6:	bd30      	pop	{r4, r5, pc}
 8005cc8:	20000334 	.word	0x20000334

08005ccc <sbrk_aligned>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	4e0e      	ldr	r6, [pc, #56]	; (8005d08 <sbrk_aligned+0x3c>)
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	6831      	ldr	r1, [r6, #0]
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	b911      	cbnz	r1, 8005cde <sbrk_aligned+0x12>
 8005cd8:	f000 fb7a 	bl	80063d0 <_sbrk_r>
 8005cdc:	6030      	str	r0, [r6, #0]
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 fb75 	bl	80063d0 <_sbrk_r>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	d00a      	beq.n	8005d00 <sbrk_aligned+0x34>
 8005cea:	1cc4      	adds	r4, r0, #3
 8005cec:	f024 0403 	bic.w	r4, r4, #3
 8005cf0:	42a0      	cmp	r0, r4
 8005cf2:	d007      	beq.n	8005d04 <sbrk_aligned+0x38>
 8005cf4:	1a21      	subs	r1, r4, r0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 fb6a 	bl	80063d0 <_sbrk_r>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d101      	bne.n	8005d04 <sbrk_aligned+0x38>
 8005d00:	f04f 34ff 	mov.w	r4, #4294967295
 8005d04:	4620      	mov	r0, r4
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	20000338 	.word	0x20000338

08005d0c <_malloc_r>:
 8005d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d10:	1ccd      	adds	r5, r1, #3
 8005d12:	f025 0503 	bic.w	r5, r5, #3
 8005d16:	3508      	adds	r5, #8
 8005d18:	2d0c      	cmp	r5, #12
 8005d1a:	bf38      	it	cc
 8005d1c:	250c      	movcc	r5, #12
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	4607      	mov	r7, r0
 8005d22:	db01      	blt.n	8005d28 <_malloc_r+0x1c>
 8005d24:	42a9      	cmp	r1, r5
 8005d26:	d905      	bls.n	8005d34 <_malloc_r+0x28>
 8005d28:	230c      	movs	r3, #12
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	4630      	mov	r0, r6
 8005d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d34:	4e2e      	ldr	r6, [pc, #184]	; (8005df0 <_malloc_r+0xe4>)
 8005d36:	f000 fbf5 	bl	8006524 <__malloc_lock>
 8005d3a:	6833      	ldr	r3, [r6, #0]
 8005d3c:	461c      	mov	r4, r3
 8005d3e:	bb34      	cbnz	r4, 8005d8e <_malloc_r+0x82>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4638      	mov	r0, r7
 8005d44:	f7ff ffc2 	bl	8005ccc <sbrk_aligned>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	d14d      	bne.n	8005dea <_malloc_r+0xde>
 8005d4e:	6834      	ldr	r4, [r6, #0]
 8005d50:	4626      	mov	r6, r4
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	d140      	bne.n	8005dd8 <_malloc_r+0xcc>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	eb04 0803 	add.w	r8, r4, r3
 8005d60:	f000 fb36 	bl	80063d0 <_sbrk_r>
 8005d64:	4580      	cmp	r8, r0
 8005d66:	d13a      	bne.n	8005dde <_malloc_r+0xd2>
 8005d68:	6821      	ldr	r1, [r4, #0]
 8005d6a:	3503      	adds	r5, #3
 8005d6c:	1a6d      	subs	r5, r5, r1
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f7ff ffa5 	bl	8005ccc <sbrk_aligned>
 8005d82:	3001      	adds	r0, #1
 8005d84:	d02b      	beq.n	8005dde <_malloc_r+0xd2>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	442b      	add	r3, r5
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	e00e      	b.n	8005dac <_malloc_r+0xa0>
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	1b52      	subs	r2, r2, r5
 8005d92:	d41e      	bmi.n	8005dd2 <_malloc_r+0xc6>
 8005d94:	2a0b      	cmp	r2, #11
 8005d96:	d916      	bls.n	8005dc6 <_malloc_r+0xba>
 8005d98:	1961      	adds	r1, r4, r5
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	6025      	str	r5, [r4, #0]
 8005d9e:	bf18      	it	ne
 8005da0:	6059      	strne	r1, [r3, #4]
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	bf08      	it	eq
 8005da6:	6031      	streq	r1, [r6, #0]
 8005da8:	5162      	str	r2, [r4, r5]
 8005daa:	604b      	str	r3, [r1, #4]
 8005dac:	4638      	mov	r0, r7
 8005dae:	f104 060b 	add.w	r6, r4, #11
 8005db2:	f000 fbbd 	bl	8006530 <__malloc_unlock>
 8005db6:	f026 0607 	bic.w	r6, r6, #7
 8005dba:	1d23      	adds	r3, r4, #4
 8005dbc:	1af2      	subs	r2, r6, r3
 8005dbe:	d0b6      	beq.n	8005d2e <_malloc_r+0x22>
 8005dc0:	1b9b      	subs	r3, r3, r6
 8005dc2:	50a3      	str	r3, [r4, r2]
 8005dc4:	e7b3      	b.n	8005d2e <_malloc_r+0x22>
 8005dc6:	6862      	ldr	r2, [r4, #4]
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	bf0c      	ite	eq
 8005dcc:	6032      	streq	r2, [r6, #0]
 8005dce:	605a      	strne	r2, [r3, #4]
 8005dd0:	e7ec      	b.n	8005dac <_malloc_r+0xa0>
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	6864      	ldr	r4, [r4, #4]
 8005dd6:	e7b2      	b.n	8005d3e <_malloc_r+0x32>
 8005dd8:	4634      	mov	r4, r6
 8005dda:	6876      	ldr	r6, [r6, #4]
 8005ddc:	e7b9      	b.n	8005d52 <_malloc_r+0x46>
 8005dde:	230c      	movs	r3, #12
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4638      	mov	r0, r7
 8005de4:	f000 fba4 	bl	8006530 <__malloc_unlock>
 8005de8:	e7a1      	b.n	8005d2e <_malloc_r+0x22>
 8005dea:	6025      	str	r5, [r4, #0]
 8005dec:	e7de      	b.n	8005dac <_malloc_r+0xa0>
 8005dee:	bf00      	nop
 8005df0:	20000334 	.word	0x20000334

08005df4 <__sfputc_r>:
 8005df4:	6893      	ldr	r3, [r2, #8]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	b410      	push	{r4}
 8005dfc:	6093      	str	r3, [r2, #8]
 8005dfe:	da08      	bge.n	8005e12 <__sfputc_r+0x1e>
 8005e00:	6994      	ldr	r4, [r2, #24]
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	db01      	blt.n	8005e0a <__sfputc_r+0x16>
 8005e06:	290a      	cmp	r1, #10
 8005e08:	d103      	bne.n	8005e12 <__sfputc_r+0x1e>
 8005e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e0e:	f7ff bc31 	b.w	8005674 <__swbuf_r>
 8005e12:	6813      	ldr	r3, [r2, #0]
 8005e14:	1c58      	adds	r0, r3, #1
 8005e16:	6010      	str	r0, [r2, #0]
 8005e18:	7019      	strb	r1, [r3, #0]
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <__sfputs_r>:
 8005e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	18d5      	adds	r5, r2, r3
 8005e2c:	42ac      	cmp	r4, r5
 8005e2e:	d101      	bne.n	8005e34 <__sfputs_r+0x12>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e007      	b.n	8005e44 <__sfputs_r+0x22>
 8005e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e38:	463a      	mov	r2, r7
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ffda 	bl	8005df4 <__sfputc_r>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d1f3      	bne.n	8005e2c <__sfputs_r+0xa>
 8005e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e48 <_vfiprintf_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	460d      	mov	r5, r1
 8005e4e:	b09d      	sub	sp, #116	; 0x74
 8005e50:	4614      	mov	r4, r2
 8005e52:	4698      	mov	r8, r3
 8005e54:	4606      	mov	r6, r0
 8005e56:	b118      	cbz	r0, 8005e60 <_vfiprintf_r+0x18>
 8005e58:	6983      	ldr	r3, [r0, #24]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <_vfiprintf_r+0x18>
 8005e5c:	f7ff fde4 	bl	8005a28 <__sinit>
 8005e60:	4b89      	ldr	r3, [pc, #548]	; (8006088 <_vfiprintf_r+0x240>)
 8005e62:	429d      	cmp	r5, r3
 8005e64:	d11b      	bne.n	8005e9e <_vfiprintf_r+0x56>
 8005e66:	6875      	ldr	r5, [r6, #4]
 8005e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e6a:	07d9      	lsls	r1, r3, #31
 8005e6c:	d405      	bmi.n	8005e7a <_vfiprintf_r+0x32>
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	059a      	lsls	r2, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_vfiprintf_r+0x32>
 8005e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e76:	f7ff fe75 	bl	8005b64 <__retarget_lock_acquire_recursive>
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	071b      	lsls	r3, r3, #28
 8005e7e:	d501      	bpl.n	8005e84 <_vfiprintf_r+0x3c>
 8005e80:	692b      	ldr	r3, [r5, #16]
 8005e82:	b9eb      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x78>
 8005e84:	4629      	mov	r1, r5
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff fc46 	bl	8005718 <__swsetup_r>
 8005e8c:	b1c0      	cbz	r0, 8005ec0 <_vfiprintf_r+0x78>
 8005e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e90:	07dc      	lsls	r4, r3, #31
 8005e92:	d50e      	bpl.n	8005eb2 <_vfiprintf_r+0x6a>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b01d      	add	sp, #116	; 0x74
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	4b7b      	ldr	r3, [pc, #492]	; (800608c <_vfiprintf_r+0x244>)
 8005ea0:	429d      	cmp	r5, r3
 8005ea2:	d101      	bne.n	8005ea8 <_vfiprintf_r+0x60>
 8005ea4:	68b5      	ldr	r5, [r6, #8]
 8005ea6:	e7df      	b.n	8005e68 <_vfiprintf_r+0x20>
 8005ea8:	4b79      	ldr	r3, [pc, #484]	; (8006090 <_vfiprintf_r+0x248>)
 8005eaa:	429d      	cmp	r5, r3
 8005eac:	bf08      	it	eq
 8005eae:	68f5      	ldreq	r5, [r6, #12]
 8005eb0:	e7da      	b.n	8005e68 <_vfiprintf_r+0x20>
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	0598      	lsls	r0, r3, #22
 8005eb6:	d4ed      	bmi.n	8005e94 <_vfiprintf_r+0x4c>
 8005eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eba:	f7ff fe54 	bl	8005b66 <__retarget_lock_release_recursive>
 8005ebe:	e7e9      	b.n	8005e94 <_vfiprintf_r+0x4c>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ece:	2330      	movs	r3, #48	; 0x30
 8005ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006094 <_vfiprintf_r+0x24c>
 8005ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ed8:	f04f 0901 	mov.w	r9, #1
 8005edc:	4623      	mov	r3, r4
 8005ede:	469a      	mov	sl, r3
 8005ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee4:	b10a      	cbz	r2, 8005eea <_vfiprintf_r+0xa2>
 8005ee6:	2a25      	cmp	r2, #37	; 0x25
 8005ee8:	d1f9      	bne.n	8005ede <_vfiprintf_r+0x96>
 8005eea:	ebba 0b04 	subs.w	fp, sl, r4
 8005eee:	d00b      	beq.n	8005f08 <_vfiprintf_r+0xc0>
 8005ef0:	465b      	mov	r3, fp
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ff93 	bl	8005e22 <__sfputs_r>
 8005efc:	3001      	adds	r0, #1
 8005efe:	f000 80aa 	beq.w	8006056 <_vfiprintf_r+0x20e>
 8005f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f04:	445a      	add	r2, fp
 8005f06:	9209      	str	r2, [sp, #36]	; 0x24
 8005f08:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a2 	beq.w	8006056 <_vfiprintf_r+0x20e>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f04f 32ff 	mov.w	r2, #4294967295
 8005f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f1c:	f10a 0a01 	add.w	sl, sl, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f28:	931a      	str	r3, [sp, #104]	; 0x68
 8005f2a:	4654      	mov	r4, sl
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f32:	4858      	ldr	r0, [pc, #352]	; (8006094 <_vfiprintf_r+0x24c>)
 8005f34:	f7fa f96c 	bl	8000210 <memchr>
 8005f38:	9a04      	ldr	r2, [sp, #16]
 8005f3a:	b9d8      	cbnz	r0, 8005f74 <_vfiprintf_r+0x12c>
 8005f3c:	06d1      	lsls	r1, r2, #27
 8005f3e:	bf44      	itt	mi
 8005f40:	2320      	movmi	r3, #32
 8005f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f46:	0713      	lsls	r3, r2, #28
 8005f48:	bf44      	itt	mi
 8005f4a:	232b      	movmi	r3, #43	; 0x2b
 8005f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f50:	f89a 3000 	ldrb.w	r3, [sl]
 8005f54:	2b2a      	cmp	r3, #42	; 0x2a
 8005f56:	d015      	beq.n	8005f84 <_vfiprintf_r+0x13c>
 8005f58:	9a07      	ldr	r2, [sp, #28]
 8005f5a:	4654      	mov	r4, sl
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f04f 0c0a 	mov.w	ip, #10
 8005f62:	4621      	mov	r1, r4
 8005f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f68:	3b30      	subs	r3, #48	; 0x30
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d94e      	bls.n	800600c <_vfiprintf_r+0x1c4>
 8005f6e:	b1b0      	cbz	r0, 8005f9e <_vfiprintf_r+0x156>
 8005f70:	9207      	str	r2, [sp, #28]
 8005f72:	e014      	b.n	8005f9e <_vfiprintf_r+0x156>
 8005f74:	eba0 0308 	sub.w	r3, r0, r8
 8005f78:	fa09 f303 	lsl.w	r3, r9, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	46a2      	mov	sl, r4
 8005f82:	e7d2      	b.n	8005f2a <_vfiprintf_r+0xe2>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	1d19      	adds	r1, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	9103      	str	r1, [sp, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfbb      	ittet	lt
 8005f90:	425b      	neglt	r3, r3
 8005f92:	f042 0202 	orrlt.w	r2, r2, #2
 8005f96:	9307      	strge	r3, [sp, #28]
 8005f98:	9307      	strlt	r3, [sp, #28]
 8005f9a:	bfb8      	it	lt
 8005f9c:	9204      	strlt	r2, [sp, #16]
 8005f9e:	7823      	ldrb	r3, [r4, #0]
 8005fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa2:	d10c      	bne.n	8005fbe <_vfiprintf_r+0x176>
 8005fa4:	7863      	ldrb	r3, [r4, #1]
 8005fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa8:	d135      	bne.n	8006016 <_vfiprintf_r+0x1ce>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9203      	str	r2, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fba:	3402      	adds	r4, #2
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060a4 <_vfiprintf_r+0x25c>
 8005fc2:	7821      	ldrb	r1, [r4, #0]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f7fa f922 	bl	8000210 <memchr>
 8005fcc:	b140      	cbz	r0, 8005fe0 <_vfiprintf_r+0x198>
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	eba0 000a 	sub.w	r0, r0, sl
 8005fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	4303      	orrs	r3, r0
 8005fdc:	3401      	adds	r4, #1
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe4:	482c      	ldr	r0, [pc, #176]	; (8006098 <_vfiprintf_r+0x250>)
 8005fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fea:	2206      	movs	r2, #6
 8005fec:	f7fa f910 	bl	8000210 <memchr>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d03f      	beq.n	8006074 <_vfiprintf_r+0x22c>
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <_vfiprintf_r+0x254>)
 8005ff6:	bb1b      	cbnz	r3, 8006040 <_vfiprintf_r+0x1f8>
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	3307      	adds	r3, #7
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006006:	443b      	add	r3, r7
 8006008:	9309      	str	r3, [sp, #36]	; 0x24
 800600a:	e767      	b.n	8005edc <_vfiprintf_r+0x94>
 800600c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006010:	460c      	mov	r4, r1
 8006012:	2001      	movs	r0, #1
 8006014:	e7a5      	b.n	8005f62 <_vfiprintf_r+0x11a>
 8006016:	2300      	movs	r3, #0
 8006018:	3401      	adds	r4, #1
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	4619      	mov	r1, r3
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4620      	mov	r0, r4
 8006024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006028:	3a30      	subs	r2, #48	; 0x30
 800602a:	2a09      	cmp	r2, #9
 800602c:	d903      	bls.n	8006036 <_vfiprintf_r+0x1ee>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0c5      	beq.n	8005fbe <_vfiprintf_r+0x176>
 8006032:	9105      	str	r1, [sp, #20]
 8006034:	e7c3      	b.n	8005fbe <_vfiprintf_r+0x176>
 8006036:	fb0c 2101 	mla	r1, ip, r1, r2
 800603a:	4604      	mov	r4, r0
 800603c:	2301      	movs	r3, #1
 800603e:	e7f0      	b.n	8006022 <_vfiprintf_r+0x1da>
 8006040:	ab03      	add	r3, sp, #12
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	462a      	mov	r2, r5
 8006046:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <_vfiprintf_r+0x258>)
 8006048:	a904      	add	r1, sp, #16
 800604a:	4630      	mov	r0, r6
 800604c:	f3af 8000 	nop.w
 8006050:	4607      	mov	r7, r0
 8006052:	1c78      	adds	r0, r7, #1
 8006054:	d1d6      	bne.n	8006004 <_vfiprintf_r+0x1bc>
 8006056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006058:	07d9      	lsls	r1, r3, #31
 800605a:	d405      	bmi.n	8006068 <_vfiprintf_r+0x220>
 800605c:	89ab      	ldrh	r3, [r5, #12]
 800605e:	059a      	lsls	r2, r3, #22
 8006060:	d402      	bmi.n	8006068 <_vfiprintf_r+0x220>
 8006062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006064:	f7ff fd7f 	bl	8005b66 <__retarget_lock_release_recursive>
 8006068:	89ab      	ldrh	r3, [r5, #12]
 800606a:	065b      	lsls	r3, r3, #25
 800606c:	f53f af12 	bmi.w	8005e94 <_vfiprintf_r+0x4c>
 8006070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006072:	e711      	b.n	8005e98 <_vfiprintf_r+0x50>
 8006074:	ab03      	add	r3, sp, #12
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	462a      	mov	r2, r5
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <_vfiprintf_r+0x258>)
 800607c:	a904      	add	r1, sp, #16
 800607e:	4630      	mov	r0, r6
 8006080:	f000 f880 	bl	8006184 <_printf_i>
 8006084:	e7e4      	b.n	8006050 <_vfiprintf_r+0x208>
 8006086:	bf00      	nop
 8006088:	0800667c 	.word	0x0800667c
 800608c:	0800669c 	.word	0x0800669c
 8006090:	0800665c 	.word	0x0800665c
 8006094:	080066bc 	.word	0x080066bc
 8006098:	080066c6 	.word	0x080066c6
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005e23 	.word	0x08005e23
 80060a4:	080066c2 	.word	0x080066c2

080060a8 <_printf_common>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	4616      	mov	r6, r2
 80060ae:	4699      	mov	r9, r3
 80060b0:	688a      	ldr	r2, [r1, #8]
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bfb8      	it	lt
 80060bc:	4613      	movlt	r3, r2
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c4:	4607      	mov	r7, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	b10a      	cbz	r2, 80060ce <_printf_common+0x26>
 80060ca:	3301      	adds	r3, #1
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	0699      	lsls	r1, r3, #26
 80060d2:	bf42      	ittt	mi
 80060d4:	6833      	ldrmi	r3, [r6, #0]
 80060d6:	3302      	addmi	r3, #2
 80060d8:	6033      	strmi	r3, [r6, #0]
 80060da:	6825      	ldr	r5, [r4, #0]
 80060dc:	f015 0506 	ands.w	r5, r5, #6
 80060e0:	d106      	bne.n	80060f0 <_printf_common+0x48>
 80060e2:	f104 0a19 	add.w	sl, r4, #25
 80060e6:	68e3      	ldr	r3, [r4, #12]
 80060e8:	6832      	ldr	r2, [r6, #0]
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	42ab      	cmp	r3, r5
 80060ee:	dc26      	bgt.n	800613e <_printf_common+0x96>
 80060f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f4:	1e13      	subs	r3, r2, #0
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	bf18      	it	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	0692      	lsls	r2, r2, #26
 80060fe:	d42b      	bmi.n	8006158 <_printf_common+0xb0>
 8006100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006104:	4649      	mov	r1, r9
 8006106:	4638      	mov	r0, r7
 8006108:	47c0      	blx	r8
 800610a:	3001      	adds	r0, #1
 800610c:	d01e      	beq.n	800614c <_printf_common+0xa4>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	68e5      	ldr	r5, [r4, #12]
 8006112:	6832      	ldr	r2, [r6, #0]
 8006114:	f003 0306 	and.w	r3, r3, #6
 8006118:	2b04      	cmp	r3, #4
 800611a:	bf08      	it	eq
 800611c:	1aad      	subeq	r5, r5, r2
 800611e:	68a3      	ldr	r3, [r4, #8]
 8006120:	6922      	ldr	r2, [r4, #16]
 8006122:	bf0c      	ite	eq
 8006124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006128:	2500      	movne	r5, #0
 800612a:	4293      	cmp	r3, r2
 800612c:	bfc4      	itt	gt
 800612e:	1a9b      	subgt	r3, r3, r2
 8006130:	18ed      	addgt	r5, r5, r3
 8006132:	2600      	movs	r6, #0
 8006134:	341a      	adds	r4, #26
 8006136:	42b5      	cmp	r5, r6
 8006138:	d11a      	bne.n	8006170 <_printf_common+0xc8>
 800613a:	2000      	movs	r0, #0
 800613c:	e008      	b.n	8006150 <_printf_common+0xa8>
 800613e:	2301      	movs	r3, #1
 8006140:	4652      	mov	r2, sl
 8006142:	4649      	mov	r1, r9
 8006144:	4638      	mov	r0, r7
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d103      	bne.n	8006154 <_printf_common+0xac>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	3501      	adds	r5, #1
 8006156:	e7c6      	b.n	80060e6 <_printf_common+0x3e>
 8006158:	18e1      	adds	r1, r4, r3
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	2030      	movs	r0, #48	; 0x30
 800615e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006162:	4422      	add	r2, r4
 8006164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800616c:	3302      	adds	r3, #2
 800616e:	e7c7      	b.n	8006100 <_printf_common+0x58>
 8006170:	2301      	movs	r3, #1
 8006172:	4622      	mov	r2, r4
 8006174:	4649      	mov	r1, r9
 8006176:	4638      	mov	r0, r7
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa4>
 800617e:	3601      	adds	r6, #1
 8006180:	e7d9      	b.n	8006136 <_printf_common+0x8e>
	...

08006184 <_printf_i>:
 8006184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	7e0f      	ldrb	r7, [r1, #24]
 800618a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800618c:	2f78      	cmp	r7, #120	; 0x78
 800618e:	4691      	mov	r9, r2
 8006190:	4680      	mov	r8, r0
 8006192:	460c      	mov	r4, r1
 8006194:	469a      	mov	sl, r3
 8006196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800619a:	d807      	bhi.n	80061ac <_printf_i+0x28>
 800619c:	2f62      	cmp	r7, #98	; 0x62
 800619e:	d80a      	bhi.n	80061b6 <_printf_i+0x32>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	f000 80d8 	beq.w	8006356 <_printf_i+0x1d2>
 80061a6:	2f58      	cmp	r7, #88	; 0x58
 80061a8:	f000 80a3 	beq.w	80062f2 <_printf_i+0x16e>
 80061ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b4:	e03a      	b.n	800622c <_printf_i+0xa8>
 80061b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ba:	2b15      	cmp	r3, #21
 80061bc:	d8f6      	bhi.n	80061ac <_printf_i+0x28>
 80061be:	a101      	add	r1, pc, #4	; (adr r1, 80061c4 <_printf_i+0x40>)
 80061c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	08006231 	.word	0x08006231
 80061cc:	080061ad 	.word	0x080061ad
 80061d0:	080061ad 	.word	0x080061ad
 80061d4:	080061ad 	.word	0x080061ad
 80061d8:	080061ad 	.word	0x080061ad
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080061ad 	.word	0x080061ad
 80061e4:	080061ad 	.word	0x080061ad
 80061e8:	080061ad 	.word	0x080061ad
 80061ec:	080061ad 	.word	0x080061ad
 80061f0:	0800633d 	.word	0x0800633d
 80061f4:	08006261 	.word	0x08006261
 80061f8:	0800631f 	.word	0x0800631f
 80061fc:	080061ad 	.word	0x080061ad
 8006200:	080061ad 	.word	0x080061ad
 8006204:	0800635f 	.word	0x0800635f
 8006208:	080061ad 	.word	0x080061ad
 800620c:	08006261 	.word	0x08006261
 8006210:	080061ad 	.word	0x080061ad
 8006214:	080061ad 	.word	0x080061ad
 8006218:	08006327 	.word	0x08006327
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	602a      	str	r2, [r5, #0]
 8006224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800622c:	2301      	movs	r3, #1
 800622e:	e0a3      	b.n	8006378 <_printf_i+0x1f4>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	6829      	ldr	r1, [r5, #0]
 8006234:	0606      	lsls	r6, r0, #24
 8006236:	f101 0304 	add.w	r3, r1, #4
 800623a:	d50a      	bpl.n	8006252 <_printf_i+0xce>
 800623c:	680e      	ldr	r6, [r1, #0]
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	2e00      	cmp	r6, #0
 8006242:	da03      	bge.n	800624c <_printf_i+0xc8>
 8006244:	232d      	movs	r3, #45	; 0x2d
 8006246:	4276      	negs	r6, r6
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624c:	485e      	ldr	r0, [pc, #376]	; (80063c8 <_printf_i+0x244>)
 800624e:	230a      	movs	r3, #10
 8006250:	e019      	b.n	8006286 <_printf_i+0x102>
 8006252:	680e      	ldr	r6, [r1, #0]
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800625a:	bf18      	it	ne
 800625c:	b236      	sxthne	r6, r6
 800625e:	e7ef      	b.n	8006240 <_printf_i+0xbc>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	6029      	str	r1, [r5, #0]
 8006268:	0601      	lsls	r1, r0, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xec>
 800626c:	681e      	ldr	r6, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0xf2>
 8006270:	0646      	lsls	r6, r0, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xe8>
 8006274:	881e      	ldrh	r6, [r3, #0]
 8006276:	4854      	ldr	r0, [pc, #336]	; (80063c8 <_printf_i+0x244>)
 8006278:	2f6f      	cmp	r7, #111	; 0x6f
 800627a:	bf0c      	ite	eq
 800627c:	2308      	moveq	r3, #8
 800627e:	230a      	movne	r3, #10
 8006280:	2100      	movs	r1, #0
 8006282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006286:	6865      	ldr	r5, [r4, #4]
 8006288:	60a5      	str	r5, [r4, #8]
 800628a:	2d00      	cmp	r5, #0
 800628c:	bfa2      	ittt	ge
 800628e:	6821      	ldrge	r1, [r4, #0]
 8006290:	f021 0104 	bicge.w	r1, r1, #4
 8006294:	6021      	strge	r1, [r4, #0]
 8006296:	b90e      	cbnz	r6, 800629c <_printf_i+0x118>
 8006298:	2d00      	cmp	r5, #0
 800629a:	d04d      	beq.n	8006338 <_printf_i+0x1b4>
 800629c:	4615      	mov	r5, r2
 800629e:	fbb6 f1f3 	udiv	r1, r6, r3
 80062a2:	fb03 6711 	mls	r7, r3, r1, r6
 80062a6:	5dc7      	ldrb	r7, [r0, r7]
 80062a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062ac:	4637      	mov	r7, r6
 80062ae:	42bb      	cmp	r3, r7
 80062b0:	460e      	mov	r6, r1
 80062b2:	d9f4      	bls.n	800629e <_printf_i+0x11a>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10b      	bne.n	80062d0 <_printf_i+0x14c>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	07de      	lsls	r6, r3, #31
 80062bc:	d508      	bpl.n	80062d0 <_printf_i+0x14c>
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	6861      	ldr	r1, [r4, #4]
 80062c2:	4299      	cmp	r1, r3
 80062c4:	bfde      	ittt	le
 80062c6:	2330      	movle	r3, #48	; 0x30
 80062c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062d0:	1b52      	subs	r2, r2, r5
 80062d2:	6122      	str	r2, [r4, #16]
 80062d4:	f8cd a000 	str.w	sl, [sp]
 80062d8:	464b      	mov	r3, r9
 80062da:	aa03      	add	r2, sp, #12
 80062dc:	4621      	mov	r1, r4
 80062de:	4640      	mov	r0, r8
 80062e0:	f7ff fee2 	bl	80060a8 <_printf_common>
 80062e4:	3001      	adds	r0, #1
 80062e6:	d14c      	bne.n	8006382 <_printf_i+0x1fe>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	b004      	add	sp, #16
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	4835      	ldr	r0, [pc, #212]	; (80063c8 <_printf_i+0x244>)
 80062f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062f8:	6829      	ldr	r1, [r5, #0]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006300:	6029      	str	r1, [r5, #0]
 8006302:	061d      	lsls	r5, r3, #24
 8006304:	d514      	bpl.n	8006330 <_printf_i+0x1ac>
 8006306:	07df      	lsls	r7, r3, #31
 8006308:	bf44      	itt	mi
 800630a:	f043 0320 	orrmi.w	r3, r3, #32
 800630e:	6023      	strmi	r3, [r4, #0]
 8006310:	b91e      	cbnz	r6, 800631a <_printf_i+0x196>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f023 0320 	bic.w	r3, r3, #32
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	2310      	movs	r3, #16
 800631c:	e7b0      	b.n	8006280 <_printf_i+0xfc>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f043 0320 	orr.w	r3, r3, #32
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	2378      	movs	r3, #120	; 0x78
 8006328:	4828      	ldr	r0, [pc, #160]	; (80063cc <_printf_i+0x248>)
 800632a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800632e:	e7e3      	b.n	80062f8 <_printf_i+0x174>
 8006330:	0659      	lsls	r1, r3, #25
 8006332:	bf48      	it	mi
 8006334:	b2b6      	uxthmi	r6, r6
 8006336:	e7e6      	b.n	8006306 <_printf_i+0x182>
 8006338:	4615      	mov	r5, r2
 800633a:	e7bb      	b.n	80062b4 <_printf_i+0x130>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	6826      	ldr	r6, [r4, #0]
 8006340:	6961      	ldr	r1, [r4, #20]
 8006342:	1d18      	adds	r0, r3, #4
 8006344:	6028      	str	r0, [r5, #0]
 8006346:	0635      	lsls	r5, r6, #24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	d501      	bpl.n	8006350 <_printf_i+0x1cc>
 800634c:	6019      	str	r1, [r3, #0]
 800634e:	e002      	b.n	8006356 <_printf_i+0x1d2>
 8006350:	0670      	lsls	r0, r6, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0x1c8>
 8006354:	8019      	strh	r1, [r3, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	4615      	mov	r5, r2
 800635c:	e7ba      	b.n	80062d4 <_printf_i+0x150>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	602a      	str	r2, [r5, #0]
 8006364:	681d      	ldr	r5, [r3, #0]
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	2100      	movs	r1, #0
 800636a:	4628      	mov	r0, r5
 800636c:	f7f9 ff50 	bl	8000210 <memchr>
 8006370:	b108      	cbz	r0, 8006376 <_printf_i+0x1f2>
 8006372:	1b40      	subs	r0, r0, r5
 8006374:	6060      	str	r0, [r4, #4]
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	2300      	movs	r3, #0
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006380:	e7a8      	b.n	80062d4 <_printf_i+0x150>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	462a      	mov	r2, r5
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	47d0      	blx	sl
 800638c:	3001      	adds	r0, #1
 800638e:	d0ab      	beq.n	80062e8 <_printf_i+0x164>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	079b      	lsls	r3, r3, #30
 8006394:	d413      	bmi.n	80063be <_printf_i+0x23a>
 8006396:	68e0      	ldr	r0, [r4, #12]
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	4298      	cmp	r0, r3
 800639c:	bfb8      	it	lt
 800639e:	4618      	movlt	r0, r3
 80063a0:	e7a4      	b.n	80062ec <_printf_i+0x168>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4632      	mov	r2, r6
 80063a6:	4649      	mov	r1, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	47d0      	blx	sl
 80063ac:	3001      	adds	r0, #1
 80063ae:	d09b      	beq.n	80062e8 <_printf_i+0x164>
 80063b0:	3501      	adds	r5, #1
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	9903      	ldr	r1, [sp, #12]
 80063b6:	1a5b      	subs	r3, r3, r1
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dcf2      	bgt.n	80063a2 <_printf_i+0x21e>
 80063bc:	e7eb      	b.n	8006396 <_printf_i+0x212>
 80063be:	2500      	movs	r5, #0
 80063c0:	f104 0619 	add.w	r6, r4, #25
 80063c4:	e7f5      	b.n	80063b2 <_printf_i+0x22e>
 80063c6:	bf00      	nop
 80063c8:	080066cd 	.word	0x080066cd
 80063cc:	080066de 	.word	0x080066de

080063d0 <_sbrk_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d06      	ldr	r5, [pc, #24]	; (80063ec <_sbrk_r+0x1c>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fa fea0 	bl	8001120 <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_sbrk_r+0x1a>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_sbrk_r+0x1a>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	2000033c 	.word	0x2000033c

080063f0 <__sread>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	460c      	mov	r4, r1
 80063f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f8:	f000 f8a0 	bl	800653c <_read_r>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	bfab      	itete	ge
 8006400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006402:	89a3      	ldrhlt	r3, [r4, #12]
 8006404:	181b      	addge	r3, r3, r0
 8006406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800640a:	bfac      	ite	ge
 800640c:	6563      	strge	r3, [r4, #84]	; 0x54
 800640e:	81a3      	strhlt	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__swrite>:
 8006412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	461f      	mov	r7, r3
 8006418:	898b      	ldrh	r3, [r1, #12]
 800641a:	05db      	lsls	r3, r3, #23
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	4616      	mov	r6, r2
 8006422:	d505      	bpl.n	8006430 <__swrite+0x1e>
 8006424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006428:	2302      	movs	r3, #2
 800642a:	2200      	movs	r2, #0
 800642c:	f000 f868 	bl	8006500 <_lseek_r>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	4628      	mov	r0, r5
 8006442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006446:	f000 b817 	b.w	8006478 <_write_r>

0800644a <__sseek>:
 800644a:	b510      	push	{r4, lr}
 800644c:	460c      	mov	r4, r1
 800644e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006452:	f000 f855 	bl	8006500 <_lseek_r>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	bf15      	itete	ne
 800645c:	6560      	strne	r0, [r4, #84]	; 0x54
 800645e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006466:	81a3      	strheq	r3, [r4, #12]
 8006468:	bf18      	it	ne
 800646a:	81a3      	strhne	r3, [r4, #12]
 800646c:	bd10      	pop	{r4, pc}

0800646e <__sclose>:
 800646e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006472:	f000 b813 	b.w	800649c <_close_r>
	...

08006478 <_write_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_write_r+0x20>)
 800647c:	4604      	mov	r4, r0
 800647e:	4608      	mov	r0, r1
 8006480:	4611      	mov	r1, r2
 8006482:	2200      	movs	r2, #0
 8006484:	602a      	str	r2, [r5, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f7fa fdf9 	bl	800107e <_write>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_write_r+0x1e>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_write_r+0x1e>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	2000033c 	.word	0x2000033c

0800649c <_close_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d06      	ldr	r5, [pc, #24]	; (80064b8 <_close_r+0x1c>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	f7fa fe05 	bl	80010b6 <_close>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_close_r+0x1a>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_close_r+0x1a>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	2000033c 	.word	0x2000033c

080064bc <_fstat_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d07      	ldr	r5, [pc, #28]	; (80064dc <_fstat_r+0x20>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	f7fa fe00 	bl	80010ce <_fstat>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d102      	bne.n	80064d8 <_fstat_r+0x1c>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	b103      	cbz	r3, 80064d8 <_fstat_r+0x1c>
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	bf00      	nop
 80064dc:	2000033c 	.word	0x2000033c

080064e0 <_isatty_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d06      	ldr	r5, [pc, #24]	; (80064fc <_isatty_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fa fdff 	bl	80010ee <_isatty>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_isatty_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_isatty_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	2000033c 	.word	0x2000033c

08006500 <_lseek_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d07      	ldr	r5, [pc, #28]	; (8006520 <_lseek_r+0x20>)
 8006504:	4604      	mov	r4, r0
 8006506:	4608      	mov	r0, r1
 8006508:	4611      	mov	r1, r2
 800650a:	2200      	movs	r2, #0
 800650c:	602a      	str	r2, [r5, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	f7fa fdf8 	bl	8001104 <_lseek>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_lseek_r+0x1e>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_lseek_r+0x1e>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	2000033c 	.word	0x2000033c

08006524 <__malloc_lock>:
 8006524:	4801      	ldr	r0, [pc, #4]	; (800652c <__malloc_lock+0x8>)
 8006526:	f7ff bb1d 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	20000330 	.word	0x20000330

08006530 <__malloc_unlock>:
 8006530:	4801      	ldr	r0, [pc, #4]	; (8006538 <__malloc_unlock+0x8>)
 8006532:	f7ff bb18 	b.w	8005b66 <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	20000330 	.word	0x20000330

0800653c <_read_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d07      	ldr	r5, [pc, #28]	; (800655c <_read_r+0x20>)
 8006540:	4604      	mov	r4, r0
 8006542:	4608      	mov	r0, r1
 8006544:	4611      	mov	r1, r2
 8006546:	2200      	movs	r2, #0
 8006548:	602a      	str	r2, [r5, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	f7fa fd7a 	bl	8001044 <_read>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_read_r+0x1e>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_read_r+0x1e>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	2000033c 	.word	0x2000033c

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
